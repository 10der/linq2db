using System;
using Nemerle;

using NUnit.Framework;

using LinqToDB_Temp.SqlBuilder;
using LinqToDB_Temp.SqlBuilder.Optimizer;

namespace Tests.Nemerle
{
	public module OptimizerTest
	{
		Binary(e1 : SqlExpr, op : string, e2 : SqlExpr) : SqlExpr.Binary
		{
			SqlExpr.Binary(e1.Type, Precedence.Unknown, e1, op, e2)
		}

		Throw(o : object) : void
		{
			throw AssertionException($"Was: $o")
		}
		
		public ConvertString() : void
		{
			def fi    = SqlExpr.Function(typeof(int),     "f", []);
			def snull = null : string;
			
			match (Binary("1"  , "+", 2u   ).Optimize()) { | Value(String("12")) => () | e => Throw(e) }
			match (Binary(1s   , "+", "2"  ).Optimize()) { | Value(String("12")) => () | e => Throw(e) }
			match (Binary(""   , "+", 1    ).Optimize()) { | Value(String("1" )) => () | e => Throw(e) }
			match (Binary(snull, "+", "1"  ).Optimize()) { | Value(String("1" )) => () | e => Throw(e) }
			match (Binary(2l   , "+", ""   ).Optimize()) { | Value(String("2" )) => () | e => Throw(e) }
			match (Binary("2"  , "+", snull).Optimize()) { | Value(String("2" )) => () | e => Throw(e) }

			match (Binary(Binary(fi, "+", "2"), "+", "3").Optimize()) { | Binary(Function, "+", Value(String("23"))) => () | e => Throw(e) }
		}

		public ConvertNumber() : void
		{
			def fi = SqlExpr.Function(typeof(int),     "f", []);
			def fu = SqlExpr.Function(typeof(uint),    "f", []);
			def fm = SqlExpr.Function(typeof(decimal), "f", []);
			
			match (Binary(0 , "+", fi).Optimize()) { | Function           => () | e => Throw(e) }
			match (Binary(2u, "+", 0u).Optimize()) { | Value(UInt32 (2 )) => () | e => Throw(e) }
			match (Binary(2s, "+", 2s).Optimize()) { | Value(Int16  (4 )) => () | e => Throw(e) }
			match (Binary(5s, "-", 2s).Optimize()) { | Value(Int16  (3 )) => () | e => Throw(e) }
			match (Binary(3l, "*", 0l).Optimize()) { | Value(Int64  (0 )) => () | e => Throw(e) }
			match (Binary(3d, "*", 1d).Optimize()) { | Value(Double (3d)) => () | e => Throw(e) }
			match (Binary(fu, "*", 1u).Optimize()) { | Function           => () | e => Throw(e) }
			match (Binary(0b, "*", 4b).Optimize()) { | Value(Byte   (0b)) => () | e => Throw(e) }
			match (Binary(1m, "*", 5m).Optimize()) { | Value(Decimal(5m)) => () | e => Throw(e) }
			match (Binary(1m, "*", fm).Optimize()) { | Function           => () | e => Throw(e) }

			match (Binary(Binary(fi, "+", 1), "+", 2).Optimize()) { | Binary(Function, "+", Value(Int32(3))) => () | e => Throw(e) }
			match (Binary(Binary(fi, "+", 5), "-", 2).Optimize()) { | Binary(Function, "+", Value(Int32(3))) => () | e => Throw(e) }
			match (Binary(Binary(fi, "-", 5), "+", 2).Optimize()) { | Binary(Function, "-", Value(Int32(3))) => () | e => Throw(e) }
		}
	}
}
