using System;
using Nemerle;

namespace LinqToDB_Temp.SqlBuilder
{
	public module Optimizer
	{
		public Optimize(this expr : SqlExpr) : SqlExpr
		{
			def concatStringAndValue(v1, v2)
			{
				if (v1 == null && v2 == null) null : string else $"$v1$v2"
			}
			def addString(e, v1, v2)
			{
				Optimize(SqlExpr.Binary(expr.Type, expr.Precedence, e, "+", $"$v1$v2"))
			}
			def addNumber(e, v, op1, op2)
			{
				Optimize(SqlExpr.Binary(expr.Type, expr.Precedence, e, if (v >= 0) op1 else op2, if (v >= 0) v else -v))
			}
			def getSqlDataType(e)
			{
				def size = match (e.Type : SqlDataType)
				{
					| Char      (len)
					| VarChar   (len)
					| Text      (len)
					| NChar     (len)
					| NVarChar  (len)
					| NText     (len) => len
					| Binary    (len)
					| VarBinary (len) => len * 2
					| type            => type.MaxDisplaySize
				};
				
				SqlDataType.VarChar(typeof(string), if (size > 0) size else 100)
			}
			def toString(e, v)
			{
				def type = getSqlDataType(e);
				SqlExpr.Binary(expr.Type, expr.Precedence, SqlExpr.Function(type, "Convert", [SqlExpr.DataType(type), e]), "+", v)
			}
			def toString2(v, e)
			{
				def type = getSqlDataType(e);
				SqlExpr.Binary(expr.Type, expr.Precedence, v, "+", SqlExpr.Function(type, "Convert", [SqlExpr.DataType(type), e]))
			}
			def getPrecision(e)
			{
				match (e.Type : SqlDataType)
				{
					| Decimal   (p, _)
					| Money     (p, _)
					| SmallMoney(p, _) => p
					| _                => -1
				}
			}

			match (expr)
			{
				| Binary(Binary(e, "+", Value(String(v1))), "+", Value(String(v2))) => addString(e, v1, v2)                 // ex + "1" + "2" -> ex + "12"
				| Binary(Binary(e, "+", Value(Int32(v1))),  "+", Value(Int32 (v2))) => addNumber(e, v1 + v2, "+", "-")      // ex + 2 + 3     -> ex + 5
				| Binary(Binary(e, "+", Value(Int32(v1))),  "-", Value(Int32 (v2))) => addNumber(e, v1 - v2, "+", "-")      // ex + 2 - 3     -> ex + 1
				| Binary(Binary(e, "-", Value(Int32(v1))),  "+", Value(Int32 (v2))) => addNumber(e, v1 - v2, "-", "+")      // ex - 2 + 3     -> ex + 1
				| Binary(Value(String(v1))      , "+", Value(v2)              ) => concatStringAndValue(v1, v2.GetValue())  // "1" + val      -> "1val"
				| Binary(Value(v1)              , "+", Value(String(v2))      ) => concatStringAndValue(v1.GetValue(), v2)  // val + "1"      -> "val1"
				| Binary(Value(String(""))      , "+", e                      ) when e.Type.IsString                        // "" + ex        -> "ex"
				| Binary(Value(String(null))    , "+", e                      ) when e.Type.IsString
				| Binary(e                      , "+", Value(String(""))      ) when e.Type.IsString                        // ex + ""        -> "ex"
				| Binary(e                      , "+", Value(String(null))    ) when e.Type.IsString
				| Binary(Value(SByte  (0))      , "+", e                      )                                             // 0  + ex        -> ex
				| Binary(Value(Int16  (0))      , "+", e                      )
				| Binary(Value(Int32  (0))      , "+", e                      )
				| Binary(Value(Int64  (0))      , "+", e                      )
				| Binary(Value(Byte   (0))      , "+", e                      )
				| Binary(Value(UInt16 (0))      , "+", e                      )
				| Binary(Value(UInt32 (0))      , "+", e                      )
				| Binary(Value(UInt64 (0))      , "+", e                      )
				| Binary(Value(Single (0f))     , "+", e                      )
				| Binary(Value(Double (0d))     , "+", e                      )
				| Binary(Value(Decimal(0m))     , "+", e                      )
				| Binary(e                      , "+", Value(SByte  (0))      )                                             // ex + 0         -> ex
				| Binary(e                      , "+", Value(Int16  (0))      )
				| Binary(e                      , "+", Value(Int32  (0))      )
				| Binary(e                      , "+", Value(Int64  (0))      )
				| Binary(e                      , "+", Value(Byte   (0))      )
				| Binary(e                      , "+", Value(UInt16 (0))      )
				| Binary(e                      , "+", Value(UInt32 (0))      )
				| Binary(e                      , "+", Value(UInt64 (0))      )
				| Binary(e                      , "+", Value(Single (0f))     )
				| Binary(e                      , "+", Value(Double (0d))     )
				| Binary(e                      , "+", Value(Decimal(0m))     )
				| Binary(Value(SByte  (0))  as e, "*", _                      )                                             // 0  * ex        -> 0
				| Binary(Value(Int16  (0))  as e, "*", _                      )
				| Binary(Value(Int32  (0))  as e, "*", _                      )
				| Binary(Value(Int64  (0))  as e, "*", _                      )
				| Binary(Value(Byte   (0))  as e, "*", _                      )
				| Binary(Value(UInt16 (0))  as e, "*", _                      )
				| Binary(Value(UInt32 (0))  as e, "*", _                      )
				| Binary(Value(UInt64 (0))  as e, "*", _                      )
				| Binary(Value(Single (0f)) as e, "*", _                      )
				| Binary(Value(Double (0d)) as e, "*", _                      )
				| Binary(Value(Decimal(0m)) as e, "*", _                      )
				| Binary(_                      , "*", Value(SByte  (0))  as e)                                             // ex * 0         -> 0
				| Binary(_                      , "*", Value(Int16  (0))  as e)
				| Binary(_                      , "*", Value(Int32  (0))  as e)
				| Binary(_                      , "*", Value(Int64  (0))  as e)
				| Binary(_                      , "*", Value(Byte   (0))  as e)
				| Binary(_                      , "*", Value(UInt16 (0))  as e)
				| Binary(_                      , "*", Value(UInt32 (0))  as e)
				| Binary(_                      , "*", Value(UInt64 (0))  as e)
				| Binary(_                      , "*", Value(Single (0f)) as e)
				| Binary(_                      , "*", Value(Double (0d)) as e)
				| Binary(_                      , "*", Value(Decimal(0m)) as e)
				| Binary(Value(SByte  (1))      , "*", e                      )                                             // 1  * ex        -> ex
				| Binary(Value(Int16  (1))      , "*", e                      )
				| Binary(Value(Int32  (1))      , "*", e                      )
				| Binary(Value(Int64  (1))      , "*", e                      )
				| Binary(Value(Byte   (1))      , "*", e                      )
				| Binary(Value(UInt16 (1))      , "*", e                      )
				| Binary(Value(UInt32 (1))      , "*", e                      )
				| Binary(Value(UInt64 (1))      , "*", e                      )
				| Binary(Value(Single (1f))     , "*", e                      )
				| Binary(Value(Double (1d))     , "*", e                      )
				| Binary(Value(Decimal(1m))     , "*", e                      )
				| Binary(e                      , "*", Value(SByte  (1))      )                                             // ex * 1         -> ex
				| Binary(e                      , "*", Value(Int16  (1))      )
				| Binary(e                      , "*", Value(Int32  (1))      )
				| Binary(e                      , "*", Value(Int64  (1))      )
				| Binary(e                      , "*", Value(Byte   (1))      )
				| Binary(e                      , "*", Value(UInt16 (1))      )
				| Binary(e                      , "*", Value(UInt32 (1))      )
				| Binary(e                      , "*", Value(UInt64 (1))      )
				| Binary(e                      , "*", Value(Single (1f))     )
				| Binary(e                      , "*", Value(Double (1d))     )
				| Binary(e                      , "*", Value(Decimal(1m))     )                       => Optimize(e)
				| Binary(e                      , "+", Value(String) as v     ) when !e.Type.IsString => toString (e, v)    // ex + "..."     -> ex
				| Binary(Value(String) as v     , "+", e                      ) when !e.Type.IsString => toString2(v, e)    // ex + "..."     -> ex
				| Binary(Value(SByte  (v1))     , "+", Value(SByte  (v2))     ) => v1 + v2                                  // 2 + 3          -> 5
				| Binary(Value(Int16  (v1))     , "+", Value(Int16  (v2))     ) => v1 + v2
				| Binary(Value(Int32  (v1))     , "+", Value(Int32  (v2))     ) => v1 + v2
				| Binary(Value(Int64  (v1))     , "+", Value(Int64  (v2))     ) => v1 + v2
				| Binary(Value(Byte   (v1))     , "+", Value(Byte   (v2))     ) => v1 + v2
				| Binary(Value(UInt16 (v1))     , "+", Value(UInt16 (v2))     ) => v1 + v2
				| Binary(Value(UInt32 (v1))     , "+", Value(UInt32 (v2))     ) => v1 + v2
				| Binary(Value(UInt64 (v1))     , "+", Value(UInt64 (v2))     ) => v1 + v2
				| Binary(Value(Single (v1))     , "+", Value(Single (v2))     ) => v1 + v2
				| Binary(Value(Double (v1))     , "+", Value(Double (v2))     ) => v1 + v2
				| Binary(Value(Decimal(v1))     , "+", Value(Decimal(v2))     ) => v1 + v2
				| Binary(Value(SByte  (v1))     , "-", Value(SByte  (v2))     ) => v1 - v2                                  // 2 - 3          -> -1
				| Binary(Value(Int16  (v1))     , "-", Value(Int16  (v2))     ) => v1 - v2
				| Binary(Value(Int32  (v1))     , "-", Value(Int32  (v2))     ) => v1 - v2
				| Binary(Value(Int64  (v1))     , "-", Value(Int64  (v2))     ) => v1 - v2
				| Binary(Value(Byte   (v1))     , "-", Value(Byte   (v2))     ) => v1 - v2
				| Binary(Value(UInt16 (v1))     , "-", Value(UInt16 (v2))     ) => v1 - v2
				| Binary(Value(UInt32 (v1))     , "-", Value(UInt32 (v2))     ) => v1 - v2
				| Binary(Value(UInt64 (v1))     , "-", Value(UInt64 (v2))     ) => v1 - v2
				| Binary(Value(Single (v1))     , "-", Value(Single (v2))     ) => v1 - v2
				| Binary(Value(Double (v1))     , "-", Value(Double (v2))     ) => v1 - v2
				| Binary(Value(Decimal(v1))     , "-", Value(Decimal(v2))     ) => v1 - v2
				| Binary(Value(SByte  (v1))     , "*", Value(SByte  (v2))     ) => v1 * v2                                  // 2 * 3          -> 6
				| Binary(Value(Int16  (v1))     , "*", Value(Int16  (v2))     ) => v1 * v2
				| Binary(Value(Int32  (v1))     , "*", Value(Int32  (v2))     ) => v1 * v2
				| Binary(Value(Int64  (v1))     , "*", Value(Int64  (v2))     ) => v1 * v2
				| Binary(Value(Byte   (v1))     , "*", Value(Byte   (v2))     ) => v1 * v2
				| Binary(Value(UInt16 (v1))     , "*", Value(UInt16 (v2))     ) => v1 * v2
				| Binary(Value(UInt32 (v1))     , "*", Value(UInt32 (v2))     ) => v1 * v2
				| Binary(Value(UInt64 (v1))     , "*", Value(UInt64 (v2))     ) => v1 * v2
				| Binary(Value(Single (v1))     , "*", Value(Single (v2))     ) => v1 * v2
				| Binary(Value(Double (v1))     , "*", Value(Double (v2))     ) => v1 * v2
				| Binary(Value(Decimal(v1))     , "*", Value(Decimal(v2))     ) => v1 * v2
				| Binary(Value(Int32  (v1))     , "*", Value(Double (v2))     ) => v1 * v2
				| Binary(Value(Double (v1))     , "*", Value(Int32  (v2))     ) => v1 * v2
				/*
				| Function("ConvertToCaseCompareTo", [p1, p2]) =>
								return ConvertExpression(new SqlFunction(func.SystemType, "CASE",
									new SqlQuery.SearchCondition().Expr(func.Parameters[0]). Greater .Expr(func.Parameters[1]).ToExpr(), new SqlValue(1),
									new SqlQuery.SearchCondition().Expr(func.Parameters[0]). Equal   .Expr(func.Parameters[1]).ToExpr(), new SqlValue(0),
									new SqlValue(-1)));
				*/
				| Function("$Convert$", [DataType(Int32), DataType(Int16), e]) => e
				| Function("$Convert$", [to,              _,               e]) when getPrecision(to) > 0 => e
				| Function("$Convert$", [to,              _,               e]) when to.Type.SystemType == typeof(object) => e
				| Function("$Convert$", [to,              _,               e]) => SqlExpr.Function(expr.Type, "Convert", [to, e])
				| Expression("{0}", [e])
				| e => e
			}
		}
	}
}
