using System;
using Nemerle;

namespace LinqToDB_Temp.SqlBuilder
{
	public module Optimizer
	{
		public Optimize(this expr : SqlExpr) : SqlExpr
		{
			def concatStringAndValue(v1, v2)
			{
				if (v1 == null && v2 == null) null : string else $"$v1$v2"
			}
			def addString(e, v1, v2)
			{
				Optimize(SqlExpr.Binary(expr.Type, expr.Precedence, e, "+", $"$v1$v2"))
			}
			def addNumber(e, v, op1, op2)
			{
				Optimize(SqlExpr.Binary(expr.Type, expr.Precedence, e, if (v >= 0) op1 else op2, if (v >= 0) v else -v))
			}
			def getSqlDataType(e)
			{
				def size = match (e.Type : SqlDataType)
				{
					| Char      (len)
					| VarChar   (len)
					| Text      (len)
					| NChar     (len)
					| NVarChar  (len)
					| NText     (len) => len
					| Binary    (len)
					| VarBinary (len) => len * 2
					| type            => type.MaxDisplaySize
				};
				
				SqlDataType.VarChar(typeof(string), if (size > 0) size else 100)
			}
			def toString(e, v)
			{
				def type = getSqlDataType(e);
				SqlExpr.Binary(expr.Type, expr.Precedence, SqlExpr.Function(type, "Convert", [SqlExpr.DataType(type), e]), "+", v)
			}
			def toString2(v, e)
			{
				def type = getSqlDataType(e);
				SqlExpr.Binary(expr.Type, expr.Precedence, v, "+", SqlExpr.Function(type, "Convert", [SqlExpr.DataType(type), e]))
			}
			def getPrecision(e)
			{
				match (e.Type : SqlDataType)
				{
					| Decimal   (p, _)
					| Money     (p, _)
					| SmallMoney(p, _) => p
					| _                => -1
				}
			}
			def toCase1(e1, e2)
			{
				Optimize(SqlExpr.Function(expr.Type, "CASE",
					[
						SqlExpr.Condition(SqlPredicate.Compare(e1, SqlOperator.Greater, e2)),  1 : SqlExpr,
						SqlExpr.Condition(SqlPredicate.Compare(e1, SqlOperator.Equal,   e2)),  0 : SqlExpr,
						                                                                      -1 : SqlExpr]
					))
			}
			def toCase2(name, e)
			{
				SqlExpr.Function(typeof(int), name, [Optimize(SqlExpr.Function(expr.Type, "CASE", [e, 1 : SqlExpr, 0 : SqlExpr]))])
			}
			def convertCase(cps)
			{
				def loop(ps : list[SqlExpr])
				{
					| Value(Boolean(true))  :: p  :: _ => [p]
					| Value(Boolean(false)) :: _  :: t => loop(t)
					| p1                    :: p2 :: t => p1 :: p2 :: loop(t)
					| _                                => ps
				}

				match (loop(cps))
				{
					| [p]                              => p
					| ps when ReferenceEquals(ps, cps) => expr
					| ps                               => SqlExpr.Function(expr.Type, "CASE", ps)
				}
			}
			def optimizeCondition(c)
			{
				def p = Optimize(c.Predicate);
				if (ReferenceEquals(p, c.Predicate)) c else SqlExpr.Condition(p)
			}

			match (expr)
			{
				| (e <+> Value(String(v1))) <+> Value(String(v2))               => addString(e, v1, v2)                    // ex + "1" + "2" -> ex + "12"
				| (e <+> Value(Int32(v1)))  <+> Value(Int32 (v2))               => addNumber(e, v1 + v2, "+", "-")         // ex + 2 + 3     -> ex + 5
				| (e <+> Value(Int32(v1)))  <-> Value(Int32 (v2))               => addNumber(e, v1 - v2, "+", "-")         // ex + 2 - 3     -> ex + 1
				| (e <-> Value(Int32(v1)))  <+> Value(Int32 (v2))               => addNumber(e, v1 - v2, "-", "+")         // ex - 2 + 3     -> ex + 1
				| Value(String(v1))         <+> Value(v2)                       => concatStringAndValue(v1, v2.GetValue()) // "1" + val      -> "1val"
				| Value(v1)                 <+> Value(String(v2))               => concatStringAndValue(v1.GetValue(), v2) // val + "1"      -> "val1"
				| Value(String(""))         <+> e                    when e.Type.IsString                                  // "" + ex        -> "ex"
				| Value(String(null))       <+> e                    when e.Type.IsString
				| e                         <+> Value(String(""))    when e.Type.IsString                                  // ex + ""        -> "ex"
				| e                         <+> Value(String(null))  when e.Type.IsString
				| Value(SByte  (0))         <+> e                                                                          // 0  + ex        -> ex
				| Value(Int16  (0))         <+> e
				| Value(Int32  (0))         <+> e
				| Value(Int64  (0))         <+> e
				| Value(Byte   (0))         <+> e
				| Value(UInt16 (0))         <+> e
				| Value(UInt32 (0))         <+> e
				| Value(UInt64 (0))         <+> e
				| Value(Single (0f))        <+> e
				| Value(Double (0d))        <+> e
				| Value(Decimal(0m))        <+> e
				| e                         <+> Value(SByte  (0))                                                          // ex + 0         -> ex
				| e                         <+> Value(Int16  (0))
				| e                         <+> Value(Int32  (0))
				| e                         <+> Value(Int64  (0))
				| e                         <+> Value(Byte   (0))
				| e                         <+> Value(UInt16 (0))
				| e                         <+> Value(UInt32 (0))
				| e                         <+> Value(UInt64 (0))
				| e                         <+> Value(Single (0f))
				| e                         <+> Value(Double (0d))
				| e                         <+> Value(Decimal(0m))
				| Value(SByte  (0))  as e   <*> _                                                                          // 0  * ex        -> 0
				| Value(Int16  (0))  as e   <*> _
				| Value(Int32  (0))  as e   <*> _
				| Value(Int64  (0))  as e   <*> _
				| Value(Byte   (0))  as e   <*> _
				| Value(UInt16 (0))  as e   <*> _
				| Value(UInt32 (0))  as e   <*> _
				| Value(UInt64 (0))  as e   <*> _
				| Value(Single (0f)) as e   <*> _
				| Value(Double (0d)) as e   <*> _
				| Value(Decimal(0m)) as e   <*> _
				| _                         <*> Value(SByte  (0))  as e                                                    // ex * 0         -> 0
				| _                         <*> Value(Int16  (0))  as e
				| _                         <*> Value(Int32  (0))  as e
				| _                         <*> Value(Int64  (0))  as e
				| _                         <*> Value(Byte   (0))  as e
				| _                         <*> Value(UInt16 (0))  as e
				| _                         <*> Value(UInt32 (0))  as e
				| _                         <*> Value(UInt64 (0))  as e
				| _                         <*> Value(Single (0f)) as e
				| _                         <*> Value(Double (0d)) as e
				| _                         <*> Value(Decimal(0m)) as e
				| Value(SByte  (1))         <*> e                                                                          // 1  * ex        -> ex
				| Value(Int16  (1))         <*> e
				| Value(Int32  (1))         <*> e
				| Value(Int64  (1))         <*> e
				| Value(Byte   (1))         <*> e
				| Value(UInt16 (1))         <*> e
				| Value(UInt32 (1))         <*> e
				| Value(UInt64 (1))         <*> e
				| Value(Single (1f))        <*> e
				| Value(Double (1d))        <*> e
				| Value(Decimal(1m))        <*> e
				| e                         <*> Value(SByte  (1))                                                          // ex * 1         -> ex
				| e                         <*> Value(Int16  (1))
				| e                         <*> Value(Int32  (1))
				| e                         <*> Value(Int64  (1))
				| e                         <*> Value(Byte   (1))
				| e                         <*> Value(UInt16 (1))
				| e                         <*> Value(UInt32 (1))
				| e                         <*> Value(UInt64 (1))
				| e                         <*> Value(Single (1f))
				| e                         <*> Value(Double (1d))
				| e                         <*> Value(Decimal(1m))              => Optimize(e)
				| e                         <+> Value(String) as v when !e.Type.IsString => toString (e, v)                // ex + "..."     -> ex
				| Value(String) as v        <+> e                  when !e.Type.IsString => toString2(v, e)                // ex + "..."     -> ex
				| Value(SByte  (v1))        <+> Value(SByte  (v2))              => v1 + v2                                 // 2 + 3          -> 5
				| Value(Int16  (v1))        <+> Value(Int16  (v2))              => v1 + v2
				| Value(Int32  (v1))        <+> Value(Int32  (v2))              => v1 + v2
				| Value(Int64  (v1))        <+> Value(Int64  (v2))              => v1 + v2
				| Value(Byte   (v1))        <+> Value(Byte   (v2))              => v1 + v2
				| Value(UInt16 (v1))        <+> Value(UInt16 (v2))              => v1 + v2
				| Value(UInt32 (v1))        <+> Value(UInt32 (v2))              => v1 + v2
				| Value(UInt64 (v1))        <+> Value(UInt64 (v2))              => v1 + v2
				| Value(Single (v1))        <+> Value(Single (v2))              => v1 + v2
				| Value(Double (v1))        <+> Value(Double (v2))              => v1 + v2
				| Value(Decimal(v1))        <+> Value(Decimal(v2))              => v1 + v2
				| Value(SByte  (v1))        <-> Value(SByte  (v2))              => v1 - v2                                 // 2 - 3          -> -1
				| Value(Int16  (v1))        <-> Value(Int16  (v2))              => v1 - v2
				| Value(Int32  (v1))        <-> Value(Int32  (v2))              => v1 - v2
				| Value(Int64  (v1))        <-> Value(Int64  (v2))              => v1 - v2
				| Value(Byte   (v1))        <-> Value(Byte   (v2))              => v1 - v2
				| Value(UInt16 (v1))        <-> Value(UInt16 (v2))              => v1 - v2
				| Value(UInt32 (v1))        <-> Value(UInt32 (v2))              => v1 - v2
				| Value(UInt64 (v1))        <-> Value(UInt64 (v2))              => v1 - v2
				| Value(Single (v1))        <-> Value(Single (v2))              => v1 - v2
				| Value(Double (v1))        <-> Value(Double (v2))              => v1 - v2
				| Value(Decimal(v1))        <-> Value(Decimal(v2))              => v1 - v2
				| Value(SByte  (v1))        <*> Value(SByte  (v2))              => v1 * v2                                 // 2 * 3          -> 6
				| Value(Int16  (v1))        <*> Value(Int16  (v2))              => v1 * v2
				| Value(Int32  (v1))        <*> Value(Int32  (v2))              => v1 * v2
				| Value(Int64  (v1))        <*> Value(Int64  (v2))              => v1 * v2
				| Value(Byte   (v1))        <*> Value(Byte   (v2))              => v1 * v2
				| Value(UInt16 (v1))        <*> Value(UInt16 (v2))              => v1 * v2
				| Value(UInt32 (v1))        <*> Value(UInt32 (v2))              => v1 * v2
				| Value(UInt64 (v1))        <*> Value(UInt64 (v2))              => v1 * v2
				| Value(Single (v1))        <*> Value(Single (v2))              => v1 * v2
				| Value(Double (v1))        <*> Value(Double (v2))              => v1 * v2
				| Value(Decimal(v1))        <*> Value(Decimal(v2))              => v1 * v2
				| Value(Int32  (v1))        <*> Value(Double (v2))              => v1 * v2
				| Value(Double (v1))        <*> Value(Int32  (v2))              => v1 * v2
				| Function("ConvertToCaseCompareTo", [e1, e2])                  => toCase1(e1, e2)
				| Function("Convert",   [_, Function  ("Convert",          [_, p])]) when expr.Type.EqualsUnderlying(p.Type) => p
				| Function("Convert",   [_, Expression("Cast({0} as {1})", [p, _])]) when expr.Type.EqualsUnderlying(p.Type) => p
				| Function("$Convert$", [DataType(Int32), DataType(Int16), e])  => e
				| Function("$Convert$", [to,              _,               e]) when getPrecision(to) > 0                 => e
				| Function("$Convert$", [to,              _,               e]) when to.Type.SystemType == typeof(object) => e
				| Function("$Convert$", [to,              _,               e])  => Optimize(SqlExpr.Function(expr.Type, "Convert", [to, e]))
				| Function("Average", ps)                                       => SqlExpr.Function(expr.Type, "Avg", ps)
				| Function("Max", [p]) when expr.Type is SqlDataType.Boolean    => toCase2("Max", p)
				| Function("Min", [p]) when expr.Type is SqlDataType.Boolean    => toCase2("Min", p)
				| Function("CASE", ps)                                          => convertCase(ps)
				| Condition as c                                                => optimizeCondition(c)
				| Expression("{0}", [null])                                     => expr
				| Expression("{0}", [e])
				| e => e
			}
		}

		public Optimize(this predicate : SqlPredicate) : SqlPredicate
		{
			| Not(e1 <==> e2)        => e1 != e2                                    // NOT (a =  b)    -> a <> b
			| Not(e1 <!=> e2)        => e1 == e2                                    // NOT (a <> b)    -> a =  b
			| Not(e1 <>>  e2)        => e1 <= e2                                    // NOT (a >  b)    -> a <= b
			| Not(e1 <!<> e2)
			| Not(e1 <>=> e2)        => e1 <  e2                                    // NOT (a >= b)    -> a <  b
			| Not(e1 <<>  e2)        => e1 <= e2                                    // NOT (a <  b)    -> a <= b
			| Not(e1 <!>> e2)
			| Not(e1 <<=> e2)        => e1 >  e2                                    // NOT (a <= b)    -> a >  b
			| Not(Value(Boolean(v))) => !v                                          // NOT (true)      -> false
			| Not(Not(e))                                                           // NOT (NOT ( e )) -> e
			| Value(Boolean(true))       <&&> e                                     // true  AND e     -> e
			| Value(Boolean(false))      <||> e                                     // false OR  e     -> e
			| e                          <&&> Value(Boolean(true))                  // e     AND true  -> e
			| e                          <||> Value(Boolean(false)) => Optimize(e)  // e     OR  false -> e
			| Value(Boolean(false)) as e <&&> _                                     // false AND a     -> false
			| Value(Boolean(true))  as e <||> _                                     // true  OR  a     -> true
			| _                          <&&> Value(Boolean(false)) as e            // a     AND false -> false
			| _                          <||> Value(Boolean(true))  as e => e       // a     OR  true  -> true
			| Value(v1) <==> Value(v2) =>  Equals(v1.GetValue(), v2.GetValue())     // 25 == 48 -> false
			| Value(v1) <!=> Value(v2) => !Equals(v1.GetValue(), v2.GetValue())     // 25 != 48 -> true
			| Function("CASE", [Condition(c),           Value(v1), _])      <=> Value(v2) when Equals(v1.GetValue(), v2.GetValue()) => c
			| Function("CASE", [Condition(e1  <?> e2),  Value(Boolean), _]) <=> Value(Boolean) => SqlPredicate.Compare(e1, RevertOperator(op), e2)
			| Function("CASE", [Condition(e11 <>> e12), Value(Int32( 1)), Condition(e21 <=> e22), Value(Int32( 0)), Value(Int32(-1))])
				<?>
				Value(Int32(0)) when e11.Equals(e21) && e12.Equals(e22)
				=> SqlPredicate.Compare(e11, op, e12)
			| p => p
		}

		RevertOperator(op : SqlOperator) : SqlOperator
		{
			| Equal          => SqlOperator.NotEqual
			| NotEqual       => SqlOperator.Equal
			| Greater        => SqlOperator.LessOrEqual
			| NotLess
			| GreaterOrEqual => SqlOperator.Less
			| Less           => SqlOperator.GreaterOrEqual
			| NotGreater
			| LessOrEqual    => SqlOperator.Greater
		}
	}
}
