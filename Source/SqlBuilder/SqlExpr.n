using System;
using System.Collections.Generic;
using System.Text;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Extensions;
using Nemerle.Internal;

namespace LinqToDB_Temp.SqlBuilder
{
	using MacroInternal;
	using Precedence;

	[Record, StructuralEquality]
	public variant SqlExpr
	{
		[ReplaceCtorParameter(precedence, Unknown)]
		| Query
		{
			new Query : SqlQuery
		}

		[ReplaceCtorParameter(type,       expr.Type)]
		[ReplaceCtorParameter(precedence, Primary)]
		| Column
		{
			Expr : SqlExpr;

			[IgnoreField] mutable Alias : string;
		}

		[ReplaceCtorParameter(type,       field.Type)]
		[ReplaceCtorParameter(precedence, Primary)]
		| Field
		{
			new Field : SqlField;
		}

		| Binary
		{
			Expr1     : SqlExpr;
			Operation : string;
			Expr2     : SqlExpr;
		}

		| Expression
		{
			Expr       : string;
			Parameters : list[SqlExpr]
		}

		| Function
		{
			Name       : string;
			Parameters : list[SqlExpr];

			this(type : SqlDataType, name : string, parameters : list[SqlExpr])
			{
				this(type, Primary, name, parameters)
			}
		}

		[ReplaceCtorParameter(precedence, Primary)]
		| Parameter
		{
			Name : string;
		}

		[ReplaceCtorParameter(precedence, Primary)]
		[ReplaceCtorParameter(type,       value.Type)]
		| Value
		{
			new Value : SqlValue;
		}

		[ReplaceCtorParameter(precedence, Primary)]
		[ReplaceCtorParameter(type,       sqlType)]
		| DataType
		{
			SqlType : SqlDataType
		}

		[ReplaceCtorParameter(precedence, predicate.Precedence)]
		[ReplaceCtorParameter(type,       if (predicate.CanBeNull) typeof(bool?) else typeof(bool))]
		| Condition
		{
			Predicate : SqlPredicate;
		}

		public Type       : SqlDataType { get; }
		public Precedence : int         { get; }

		public CanBeNull : bool
		{
			get
			{
				match (this)
				{
					| Function
					| Query                 => true
					| Column    (e        ) => e.CanBeNull
					| Field     (f        ) => f.CanBeNull
					| Binary    (e1, _, e2) => e1.CanBeNull || e2.CanBeNull
					| Expression(_ , ps   ) => ps.Find(p => p.CanBeNull).IsSome
					| Parameter             => Type.CanBeNull
					| Value     (String(v)) => v == null
					| Value     (Object(v)) => v == null
					| Value                 => false
					| DataType  (t        ) => t.CanBeNull
					| Condition (p        ) => p.CanBeNull
				}
			}
		}

		public override ToString() : string
		{
			match (this)
			{
				| Binary    (e1, op, e2) => $"$e1 $op $e2"
				| Expression(ex, ps)     => string.Format(ex, ps.ToArray)
				| Function  (nm, ps)     => $"$nm(..$ps)"
				| Parameter (nm)         => def n = nm ?? "parameter"; $"@$n"
				| Value     (v)          => v.ToString()
				| DataType               => Type.ToString()
				| Condition (p)          => p.ToString()
				| Column
				| Field
				| Query                  => GetType().Name
			}
		}

		public static @: (v : System.String ) : SqlExpr { SqlExpr.Value(SqlValue.String (v)) }
		public static @: (v : System.Char   ) : SqlExpr { SqlExpr.Value(SqlValue.Char   (v)) }
		public static @: (v : System.Boolean) : SqlExpr { SqlExpr.Value(SqlValue.Boolean(v)) }
		public static @: (v : System.SByte  ) : SqlExpr { SqlExpr.Value(SqlValue.SByte  (v)) }
		public static @: (v : System.Int16  ) : SqlExpr { SqlExpr.Value(SqlValue.Int16  (v)) }
		public static @: (v : System.Int32  ) : SqlExpr { SqlExpr.Value(SqlValue.Int32  (v)) }
		public static @: (v : System.Int64  ) : SqlExpr { SqlExpr.Value(SqlValue.Int64  (v)) }
		public static @: (v : System.Byte   ) : SqlExpr { SqlExpr.Value(SqlValue.Byte   (v)) }
		public static @: (v : System.UInt16 ) : SqlExpr { SqlExpr.Value(SqlValue.UInt16 (v)) }
		public static @: (v : System.UInt32 ) : SqlExpr { SqlExpr.Value(SqlValue.UInt32 (v)) }
		public static @: (v : System.UInt64 ) : SqlExpr { SqlExpr.Value(SqlValue.UInt64 (v)) }
		public static @: (v : System.Single ) : SqlExpr { SqlExpr.Value(SqlValue.Single (v)) }
		public static @: (v : System.Double ) : SqlExpr { SqlExpr.Value(SqlValue.Double (v)) }
		public static @: (v : System.Decimal) : SqlExpr { SqlExpr.Value(SqlValue.Decimal(v)) }

		public static @<==>(e1 : SqlExpr, e2 : SqlExpr) : SqlPredicate { SqlPredicate.Compare(e1, SqlOperator.Equal         , e2) }
		public static @<!=>(e1 : SqlExpr, e2 : SqlExpr) : SqlPredicate { SqlPredicate.Compare(e1, SqlOperator.NotEqual      , e2) }
		public static @<>> (e1 : SqlExpr, e2 : SqlExpr) : SqlPredicate { SqlPredicate.Compare(e1, SqlOperator.Greater       , e2) }
		public static @<>=>(e1 : SqlExpr, e2 : SqlExpr) : SqlPredicate { SqlPredicate.Compare(e1, SqlOperator.GreaterOrEqual, e2) }
		public static @<!>>(e1 : SqlExpr, e2 : SqlExpr) : SqlPredicate { SqlPredicate.Compare(e1, SqlOperator.NotGreater    , e2) }
		public static @<<> (e1 : SqlExpr, e2 : SqlExpr) : SqlPredicate { SqlPredicate.Compare(e1, SqlOperator.Less          , e2) }
		public static @<<=>(e1 : SqlExpr, e2 : SqlExpr) : SqlPredicate { SqlPredicate.Compare(e1, SqlOperator.LessOrEqual   , e2) }
		public static @<!<>(e1 : SqlExpr, e2 : SqlExpr) : SqlPredicate { SqlPredicate.Compare(e1, SqlOperator.NotLess       , e2) }
	}
}
