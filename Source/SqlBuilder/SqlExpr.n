using System;
using System.Collections.Generic;
using System.Text;

using Nemerle;
using Nemerle.Assertions;

namespace LinqToDB_Temp.SqlBuilder
{
	using MacroInternal;
	using Precedence;

	[Record]
	public variant SqlExpr
	{
		[ReplaceCtorParameter(precedence, Unknown)] | Query      { new Query : SqlQuery                                              }

		[ReplaceCtorParameter(type,       field.Type)]
		[ReplaceCtorParameter(precedence, Primary)] | Field      { new Field : SqlField;                                             }

		                                            | Binary     { Expr1     : SqlExpr;  Operation  : string;       Expr2 : SqlExpr; }
		                                            | Expression { Expr      : string;   Parameters : list[SqlExpr]                  }
		                                            | Function   { Name      : string;   Parameters : list[SqlExpr];
		                                                          this(type : SqlDataType, name : string, parameters : list[SqlExpr])
		                                                          {
		                                                              this(type, Primary, name, parameters)
		                                                          }
		                                                        }

		[ReplaceCtorParameter(precedence, Primary)] | Parameter  { Name      : string;   new Value  : SqlValue;                      }
		[ReplaceCtorParameter(precedence, Primary)] | Value      { new Value : SqlValue;                                             }

		[ReplaceCtorParameter(precedence, Primary)] | DataType

		public Type       : SqlDataType { get; }
		public Precedence : int         { get; }

		public ToSql(sb : StringBuilder) : StringBuilder
		{
			match (this)
			{
				| Binary    (e1, op, e2) => e2.ToSql(e1.ToSql(sb).Append(' ').Append(op).Append(' '))
				| Expression(ex, ps)     => sb.AppendFormat(ex, ps.Map(_.ToSql(sb)).ToArray())
				| Function  (nm, ps)     => sb.Append(nm).Append('(').Append(ps.Map(_.ToSql(sb))).Append(')')
				| Parameter (nm,v)       => v.ToSql(sb.Append('@').Append(nm ?? "parameter").Append('[')).Append(']')
				| Value     (v)          => v.ToSql(sb)
				| DataType               => Type.ToSql(sb)
				| Field | Query          => throw NotImplementedException(this.GetType().Name)
			}
		}

		public override ToString() : string
		{
			ToSql(StringBuilder()).ToString()
		}

		public static @:(v : System.String ) : SqlExpr { SqlExpr.Value(typeof(String ), SqlValue.String (v)) }
		public static @:(v : System.Boolean) : SqlExpr { SqlExpr.Value(typeof(Boolean), SqlValue.Boolean(v)) }
		public static @:(v : System.SByte  ) : SqlExpr { SqlExpr.Value(typeof(SByte  ), SqlValue.SByte  (v)) }
		public static @:(v : System.Int16  ) : SqlExpr { SqlExpr.Value(typeof(Int16  ), SqlValue.Int16  (v)) }
		public static @:(v : System.Int32  ) : SqlExpr { SqlExpr.Value(typeof(Int32  ), SqlValue.Int32  (v)) }
		public static @:(v : System.Int64  ) : SqlExpr { SqlExpr.Value(typeof(Int64  ), SqlValue.Int64  (v)) }
		public static @:(v : System.Byte   ) : SqlExpr { SqlExpr.Value(typeof(Byte   ), SqlValue.Byte   (v)) }
		public static @:(v : System.UInt16 ) : SqlExpr { SqlExpr.Value(typeof(UInt16 ), SqlValue.UInt16 (v)) }
		public static @:(v : System.UInt32 ) : SqlExpr { SqlExpr.Value(typeof(UInt32 ), SqlValue.UInt32 (v)) }
		public static @:(v : System.UInt64 ) : SqlExpr { SqlExpr.Value(typeof(UInt64 ), SqlValue.UInt64 (v)) }
		public static @:(v : System.Single ) : SqlExpr { SqlExpr.Value(typeof(Single ), SqlValue.Single (v)) }
		public static @:(v : System.Double ) : SqlExpr { SqlExpr.Value(typeof(Double ), SqlValue.Double (v)) }
		public static @:(v : System.Decimal) : SqlExpr { SqlExpr.Value(typeof(Decimal), SqlValue.Decimal(v)) }
	}
	
	public module MyModule
	{
		public Test() : object
		{
			_ = SqlExpr.Field(SqlField(typeof(int), "", ""));
			_ = SqlExpr.Value(null, 0);
			_ = SqlExpr.Value(null, DateTime.Now : object);
			def ex = SqlExpr.Expression(typeof(byte), 0, "{0}", [SqlExpr.Value(null, 1)]);

			match (ex : SqlExpr)
			{
				| Field      => ex
				| Expression("{0}", [e])
				| Binary    (_,                     "*", Value(Int32(0)) as e)
				| Binary    (Value(Int32 (0)) as e, "*", _                   )
				| Binary    (Value(Int32 (1)),      "*", e                   )
				| Binary    (Value(Int64 (1)),      "*", e                   )
				| Binary    (e,                     "*", Value(Int32(1))     )
				| Binary    (Value(String(null)),   "+", e                   )
				| Binary    (Value(String("")),     "+", e                   )
				| Binary    (Value(SByte (0)),      "+", e                   )
				| Binary    (Value(Int16 (0)),      "+", e                   )
				| Binary    (Value(Int32 (0)),      "+", e                   )
				| Binary    (Value(Int64 (0)),      "+", e                   )
				| Binary    (Value(Byte  (0)),      "+", e                   )
				| Binary    (Value(UInt16(0)),      "+", e                   )
				| Binary    (Value(UInt32(0)),      "+", e                   )
				| Binary    (Value(UInt64(0)),      "+", e                   )
				| Binary    (Value(Single(0f)),     "+", e                   )
				| Binary    (Value(Double(0d)),     "+", e                   )
				| Binary    (e,                     "+", Value(Int32(0))     )
				| Binary    (e,                     "+", Value(Int64(0))     )
				| e                                                            => e
			}
		}
	}
}
