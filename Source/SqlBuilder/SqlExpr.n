using System;

using Nemerle;
using Nemerle.Assertions;

namespace LinqToDB_Temp.SqlBuilder
{
	using MacroInternal;

	[Record]
	public variant SqlExpr
	{
		| Binary     { Expr1 : SqlExpr; Operation : string; Expr2 : SqlExpr; }
		
		| Expression { Expr : string; Parameters : list[SqlExpr] }
		
		[ReplaceCtorParameter(precedence, Precedence.Primary)]
		| DataType   

		[ReplaceCtorParameter(precedence, Precedence.Primary)]
		| Parameter  { Name : string; new Value : SqlValue; }
		
		[ReplaceCtorParameter(precedence, Precedence.Primary)]
		| Value      { new Value : SqlValue; }

		public Type       : SqlDataType { get; }
		public Precedence : int         { get; }
	}
	
	public module MyModule
	{
		public Test() : object
		{
			_ = SqlExpr.Value(null, 0);
			_ = SqlExpr.Value(null, DateTime.Now : object);
			def ex = SqlExpr.Expression(SqlDataType.Byte(typeof(byte)), 0, "{0}", [SqlExpr.Value(null, 1)]);

			match (ex : SqlExpr)
			{
				| Expression("{0}", [e])
				| Binary    (_,                     "*", Value(Int32(0)) as e)
				| Binary    (Value(Int32 (0)) as e, "*", _                   )
				| Binary    (Value(Int32 (1)),      "*", e                   )
				| Binary    (Value(Int64 (1)),      "*", e                   )
				| Binary    (e,                     "*", Value(Int32(1))     )
				| Binary    (Value(String(null)),   "+", e                   )
				| Binary    (Value(String("")),     "+", e                   )
				| Binary    (Value(SByte (0)),      "+", e                   )
				| Binary    (Value(Int16 (0)),      "+", e                   )
				| Binary    (Value(Int32 (0)),      "+", e                   )
				| Binary    (Value(Int64 (0)),      "+", e                   )
				| Binary    (Value(Byte  (0)),      "+", e                   )
				| Binary    (Value(UInt16(0)),      "+", e                   )
				| Binary    (Value(UInt32(0)),      "+", e                   )
				| Binary    (Value(UInt64(0)),      "+", e                   )
				| Binary    (Value(Single(0f)),     "+", e                   )
				| Binary    (Value(Double(0d)),     "+", e                   )
				| Binary    (e,                     "+", Value(Int32(0))     )
				| Binary    (e,                     "+", Value(Int64(0))     )
				| e                                                            => e
			}
		}
	}
}
