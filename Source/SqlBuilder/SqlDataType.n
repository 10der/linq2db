using System;
using System.Linq;
using System.Text;

using Nemerle;
using Nemerle.Assertions;

namespace LinqToDB_Temp.SqlBuilder
{
	using Extensions;

	[Record]
	public variant SqlDataType
	{
		| Char           { Length : int }
		| VarChar        { Length : int }
		| Text           { Length : int }
		| NChar          { Length : int }
		| NVarChar       { Length : int }
		| NText          { Length : int }
		| Binary         { Length : int }
		| VarBinary      { Length : int }
		| Image          
		| Boolean        
		| Guid           
		| SByte          
		| Int16          
		| Int32          
		| Int64          
		| Byte           
		| UInt16         
		| UInt32         
		| UInt64         
		| Single         
		| Double         
		| Decimal        { Precision : int; Scale : int }
		| Money          { Precision : int; Scale : int }
		| SmallMoney     { Precision : int; Scale : int }
		| Date           
		| Time           
		| DateTime       
		| DateTime2      
		| SmallDateTime  
		| DateTimeOffset 
		| Timestamp      
		| Xml            
		| Variant        
		| VarNumeric     

		public SystemType : Type { get; }

		public ToSql(sb : StringBuilder) : StringBuilder
		{
			_ = sb.Append(match (this)
				{
					| Char           => "Char          "
					| VarChar        => "VarChar       "
					| Text           => "Text          "
					| NChar          => "NChar         "
					| NVarChar       => "NVarChar      "
					| NText          => "NText         "
					| Binary         => "Binary        "
					| VarBinary      => "VarBinary     "
					| Image          => "Image         "
					| Boolean        => "Boolean       "
					| Guid           => "Guid          "
					| SByte          => "SByte         "
					| Int16          => "Int16         "
					| Int32          => "Int32         "
					| Int64          => "Int64         "
					| Byte           => "Byte          "
					| UInt16         => "UInt16        "
					| UInt32         => "UInt32        "
					| UInt64         => "UInt64        "
					| Single         => "Single        "
					| Double         => "Double        "
					| Decimal        => "Decimal       "
					| Money          => "Money         "
					| SmallMoney     => "SmallMoney    "
					| Date           => "Date          "
					| Time           => "Time          "
					| DateTime       => "DateTime      "
					| DateTime2      => "DateTime2     "
					| SmallDateTime  => "SmallDateTime "
					| DateTimeOffset => "DateTimeOffset"
					| Timestamp      => "Timestamp     "
					| Xml            => "Xml           "
					| Variant        => "Variant       "
					| VarNumeric     => "VarNumeric    "
				});

			match (this)
			{
				| Char      (l)
				| VarChar   (l)
				| Text      (l)
				| NChar     (l)
				| NVarChar  (l)
				| NText     (l)
				| Binary    (l)
				| VarBinary (l)   => if (l > 0) sb.Append('(').Append(l).Append(')') else sb
				| Decimal   (p,s)
				| Money     (p,s)
				| SmallMoney(p,s) => if (p > 0) sb.Append('(').Append(p).Append(',').Append(s).Append(')') else sb
				| _               => sb
			}
		}

		static _decimalLen = decimal.MaxValue.ToString().Length;

		public static @: (type : Type) : SqlDataType
		{
			match (type.ToUnderlying().ToCodeWithCheck())
			{
				| String         => SqlDataType.NVarChar      (type, 4000)
				| Boolean        => SqlDataType.Boolean       (type)
				| SByte          => SqlDataType.SByte         (type)
				| Int16          => SqlDataType.Int16         (type)
				| Int32          => SqlDataType.Int32         (type)
				| Int64          => SqlDataType.Int64         (type)
				| Byte           => SqlDataType.Byte          (type)
				| UInt16         => SqlDataType.UInt16        (type)
				| UInt32         => SqlDataType.UInt32        (type)
				| UInt64         => SqlDataType.UInt64        (type)
				| Single         => SqlDataType.Single        (type)
				| Double         => SqlDataType.Double        (type)
				| Decimal        => SqlDataType.Decimal       (type, _decimalLen, _decimalLen)
				| DateTime       => SqlDataType.DateTime      (type)
				| Object         => SqlDataType.Variant       (type)
				| Guid           => SqlDataType.Guid          (type)
				| ArrayOfByte    
				| Binary         => SqlDataType.VarBinary     (type, 8000)
				| TimeSpan       => SqlDataType.Time          (type)
				| DateTimeOffset => SqlDataType.DateTimeOffset(type)
				| XmlReader      => SqlDataType.Xml           (type)
				| Unknown        => throw InvalidOperationException()
			}
		}
	}
}
