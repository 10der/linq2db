using System;
using System.Data.SqlTypes;
using System.Linq;
using System.Text;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Extensions;

namespace LinqToDB_Temp.SqlBuilder
{
	using Extensions;

	[Record, StructuralEquality]
	public variant SqlDataType
	{
		| Char           { Length : int }
		| VarChar        { Length : int }
		| NChar          { Length : int }
		| NVarChar       { Length : int }
		| Text           
		| NText          
		| Binary         { Length : int }
		| VarBinary      { Length : int }
		| Image          
		| Boolean        
		| Guid           
		| SByte          
		| Int16                                            // smallint   -2^15 (                   -32,768) to 2^15-1 (                   32,767)   2 Bytes
		| Int32                                            // int        -2^31 (            -2,147,483,648) to 2^31-1 (            2,147,483,647)   4 Bytes
		| Int64                                            // bigint     -2^63 (-9,223,372,036,854,775,808) to 2^63-1 (9,223,372,036,854,775,807)   8 Bytes
		| Byte                                             // tinyint        0                              to    255                               1 Byte
		| UInt16         
		| UInt32         
		| UInt64         
		| Single                                           // real        - 3.40E+38  to -1.18E-38,  0 and 1.18E-38  to 3.40E+38                    4 Bytes    float(24)
		| Double                                           // float       - 1.79E+308 to -2.23E-308, 0 and 2.23E-308 to 1.79E+308                   8 Bytes
		| Decimal        { Precision : int; Scale : int }
		| Money                                            // money       -922,337,203,685,477.5808 to 922,337,203,685,477.5807                     8 bytes
		| SmallMoney                                       // smallmoney              -214,748.3648 to             214,748.3647                     4 bytes
		| Date           
		| Time           
		| DateTime       
		| DateTime2      
		| SmallDateTime  
		| DateTimeOffset 
		| Timestamp      
		| Xml            { Type : string; Schema : string }
		| Variant        
		| VarNumeric     
		| Geography      
		| Geometry       
		| Unknown        { DbType : string }

		public SystemType : Type { get; }

		static _decimalMaxDisplaySize : int = decimal.MaxValue.ToString().Length;
		static _sbyteMaxDisplaySize   : int = SByte.  MaxValue.ToString().Length;
		static _int16MaxDisplaySize   : int = Int16.  MaxValue.ToString().Length;
		static _int32MaxDisplaySize   : int = Int32.  MaxValue.ToString().Length;
		static _int64MaxDisplaySize   : int = Int64.  MaxValue.ToString().Length;
		static _byteMaxDisplaySize    : int = Byte.   MaxValue.ToString().Length;
		static _uint16MaxDisplaySize  : int = UInt16. MaxValue.ToString().Length;
		static _uint32MaxDisplaySize  : int = UInt32. MaxValue.ToString().Length;
		static _uint64MaxDisplaySize  : int = UInt64. MaxValue.ToString().Length;

		public MaxDisplaySize : int
		{
			get
			{
				match (this)
				{
					| Char           =>                       8000
					| VarChar        =>                       8000
					| Text           =>               int.MaxValue
					| NChar          =>                       4000
					| NVarChar       =>                       4000
					| NText          =>               int.MaxValue
					| Binary         =>                       8000
					| VarBinary      =>                       8000
					| Image          =>               int.MaxValue
					| Boolean        =>                          1
					| Guid           =>                         36
					| SByte          =>   _sbyteMaxDisplaySize + 1
					| Int16          =>   _int16MaxDisplaySize + 1
					| Int32          =>   _int32MaxDisplaySize + 1
					| Int64          =>   _int64MaxDisplaySize + 1
					| Byte           =>    _byteMaxDisplaySize + 1
					| UInt16         =>  _uint16MaxDisplaySize + 1
					| UInt32         =>  _uint32MaxDisplaySize + 1
					| UInt64         =>  _uint64MaxDisplaySize + 1
					| Single         =>                  7 + 2 + 4
					| Double         =>                 15 + 2 + 5
					| Decimal        => _decimalMaxDisplaySize + 1
					| Money          =>                   19 + 2-1
					| SmallMoney     =>                     10 + 2
					| Date           =>                         10
					| Time           =>                         16
					| DateTime       =>                         23
					| DateTime2      =>                         27
					| SmallDateTime  =>                         19
					| DateTimeOffset =>                         34
					| Timestamp      
					| Xml            
					| Variant        
					| VarNumeric     
					| Geography      
					| Geometry       
					| Unknown        =>                         -1
				}
			}
		}

		public IsString : bool
		{
			get
			{
				match (this)
				{
					| Char    
					| VarChar 
					| Text    
					| NChar   
					| NVarChar
					| NText    => SystemType != typeof(char)
					| _        => false
				}
			}
		}
		
		public override ToString() : string
		{
			match (this)
			{
				| Image                      => "Image"
				| Boolean                    => "Boolean"
				| Guid                       => "Guid"
				| SByte                      => "SByte"
				| Int16                      => "Int16"
				| Int32                      => "Int32"
				| Int64                      => "Int64"
				| Byte                       => "Byte"
				| UInt16                     => "UInt16"
				| UInt32                     => "UInt32"
				| UInt64                     => "UInt64"
				| Single                     => "Single"
				| Double                     => "Double"
				| Date                       => "Date"
				| Time                       => "Time"
				| DateTime                   => "DateTime"
				| DateTime2                  => "DateTime2"
				| SmallDateTime              => "SmallDateTime"
				| DateTimeOffset             => "DateTimeOffset"
				| Timestamp                  => "Timestamp"
				| Variant                    => "Variant"
				| VarNumeric                 => "VarNumeric"
				| Money                      =>  "Money"
				| SmallMoney                 =>  "SmallMoney"
				| Text                       => "Text"
				| NText                      => "NText"
				| Geography                  => "Geography"
				| Geometry                   => "Geometry"
				| Xml        (t, s)          => $"Xml($t $s)"
				| VarChar    (MaxValue2)     => "VarChar(max)"
				| NVarChar   (MaxValue2)     => "NVarChar(max)"
				| VarBinary  (MaxValue2)     => "VarBinary(max)"
				| Char       (len) with name =  "Char"
				| VarChar    (len) with name =  "VarChar"
				| NChar      (len) with name =  "NChar"
				| NVarChar   (len) with name =  "NVarChar"
				| Binary     (len) with name =  "Binary"
				| VarBinary  (len) with name =  "VarBinary" => if (len > 0) $"$name($len)" else name
				| Decimal    (p,s)           => if (p > 0) $"Decimal($p,$s)" else "Decimal"
				| Unknown    (type)          => type
			}
		}

		public static @:(type : Type) : SqlDataType
		{
			match (type.ToUnderlying().ToCode(true))
			{
				| String         => SqlDataType.NVarChar      (type, 4000)
				| Char           => SqlDataType.NChar         (type, 1)
				| Boolean        => SqlDataType.Boolean       (type)
				| SByte          => SqlDataType.SByte         (type)
				| Int16          => SqlDataType.Int16         (type)
				| Int32          => SqlDataType.Int32         (type)
				| Int64          => SqlDataType.Int64         (type)
				| Byte           => SqlDataType.Byte          (type)
				| UInt16         => SqlDataType.UInt16        (type)
				| UInt32         => SqlDataType.UInt32        (type)
				| UInt64         => SqlDataType.UInt64        (type)
				| Single         => SqlDataType.Single        (type)
				| Double         => SqlDataType.Double        (type)
				| Decimal        => SqlDataType.Decimal       (type, _decimalMaxDisplaySize, _decimalMaxDisplaySize)
				| DateTime       => SqlDataType.DateTime      (type)
				| Object         => SqlDataType.Variant       (type)
				| Guid           => SqlDataType.Guid          (type)
				| ArrayOfByte    
				| Binary         => SqlDataType.VarBinary     (type, 8000)
				| TimeSpan       => SqlDataType.Time          (type)
				| DateTimeOffset => SqlDataType.DateTimeOffset(type)
				| XmlReader      => SqlDataType.Xml           (type, "CONTENT", "")
				| Unknown        => SqlDataType.Unknown       (type, "")
			}
		}

		public EqualsUnderlying(type : SqlDataType) : bool
		{
			SystemType.ToUnderlying() == type.SystemType.ToUnderlying()
		}

		static MaxValue1 : int = 1_073_741_823; // 2^30 - 1
		static MaxValue2 : int = 2_147_483_647; // 2^31 - 1

		public static FromString([NotNull] value : string, systemType : Type = null) : SqlDataType
		{
			def exception()
			{
				LinqToDBException($"String '$value' can not be converted to SqlDataType.")
			}
			
			def idx1 = value.IndexOf('(');

			def (name, v1, v2) =
				if (idx1 <= 0)
					(value.Trim().ToLower(), null, null)
				else
				{
					def idx2 = value.IndexOf(')');
					when (idx2 < idx1) throw exception();

					def idx3 = value.IndexOf(',');
					if (idx3 < 0)
					{
						def s1 = value.Substring(0, idx1).Trim().ToLower();
						def s2 = value.Substring(idx1 + 1, idx2 - idx1 - 1).Trim();
						mutable n;

						if (s1 == "xml")
						{
							def (t,s) =
								if (s2.ToUpper().StartsWith("CONTENT "))
									(SqlValue.String("CONTENT"), SqlValue.String(s2.Substring("CONTENT".Length).Trim()))
								else if (s2.ToUpper().StartsWith("DOCUMENT "))
									(SqlValue.String("DOCUMENT"), SqlValue.String(s2.Substring("DOCUMENT".Length).Trim()))
								else
									(SqlValue.String("CONTENT"), SqlValue.String(s2.Trim()));

							(s1, t, s)
						}
						else if (int.TryParse(s2.Trim(), out n))
							(s1, SqlValue.Int32(n),   null)
						else
							(s1, SqlValue.String(s2), null)
					}
					else
					{
						when (idx3 < idx1 || idx3 > idx2)
							throw exception();

						def s1 = value.Substring(0, idx1).              Trim().ToLower();
						def s2 = value.Substring(idx1 + 1, idx3 - idx1 - 1).Trim().ToLower();
						def s3 = value.Substring(idx3 + 1, idx2 - idx3 - 1).Trim();
						mutable n1, n2;

						if (int.TryParse(s2, out n1) && int.TryParse(s3, out n2))
							(s1, SqlValue.Int32(n1),  SqlValue.Int32(n2))
						else
							(s1, SqlValue.String(s2), SqlValue.String(s3))
					}
				}

			def normName(n)
			{
				def n2 = n.Replace("  ", " ");
				if (n == n2) n else normName(n2)
			}

			def name = match (normName(name))
			{
				| "binary varying"             => "varbinary"
				| "char varying"               => "varchar"
				| "character"                  => "char"
				| "character varying"          => "varchar"
				| "dec"                        => "decimal"
				| "double precision"           => "float"
				| "integer"                    => "int"
				| "national character"         => "nchar"
				| "national char"              => "nchar"
				| "national character varying" => "nvarchar"
				| "national char varying(n)"   => "nvarchar"
				| "national text"              => "ntext"
				| "timestamp"                  => "rowversion"
				| n                            => n
			}

			match (name, v1, v2)
			{
				| ("bit",              null,                     null      )                          => SqlDataType.Boolean       (systemType ?? typeof(Boolean))
				| ("tinyint",          null,                     null      )                          => SqlDataType.Byte          (systemType ?? typeof(Byte))
				| ("smallint",         null,                     null      )                          => SqlDataType.Int16         (systemType ?? typeof(Int16))
				| ("int",              null,                     null      )                          => SqlDataType.Int32         (systemType ?? typeof(Int32))
				| ("bigint",           null,                     null      )                          => SqlDataType.Int64         (systemType ?? typeof(Int64))
				| ("real",             null,                     null      )                          => SqlDataType.Single        (systemType ?? typeof(Single))
				| ("float",            null,                     null      )                          => SqlDataType.Double        (systemType ?? typeof(Double))
				| ("float",            Int32(n),                 null      ) when n >= 1  && n <= 24  => SqlDataType.Single        (systemType ?? typeof(Single))
				| ("float",            Int32(n),                 null      ) when n >= 25 && n <= 53  => SqlDataType.Double        (systemType ?? typeof(Double))
				| ("decimal",          Int32(p),                 Int32(s)  ) when p >= 1 && p <= 38 && s >= 0 && s < p
				| ("numeric",          Int32(p),                 Int32(s)  ) when p >= 1 && p <= 38 && s >= 0 && s < p
				| ("decimal",          Int32(p),                 null      ) when p >= 1 && p <= 38 with s = 0
				| ("numeric",          Int32(p),                 null      ) when p >= 1 && p <= 38 with s = 0
				| ("decimal",          null,                     null      ) with (p = 18, s = 0)
				| ("numeric",          null,                     null      ) with (p = 18, s = 0)     => SqlDataType.Decimal       (systemType ?? typeof(Decimal), p, s)
				| ("char",             Int32(n),                 null      ) when n >= 1 && n <= 8000
				| ("char",             null,                     null      ) with n = 1               => SqlDataType.Char          (systemType ?? typeof(String), n)
				| ("varchar",          Int32(n),                 null      ) when n >= 1 && n <= 8000
				| ("varchar",          String("max"),            null      ) with n = MaxValue2
				| ("varchar",          null,                     null      ) with n = 1               => SqlDataType.VarChar       (systemType ?? typeof(String), n)
				| ("nchar",            Int32(n),                 null      ) when n >= 1 && n <= 4000
				| ("nchar",            null,                     null      ) with n = 1               => SqlDataType.Char          (systemType ?? typeof(String), n)
				| ("nvarchar",         Int32(n),                 null      ) when n >= 1 && n <= 4000 || n == MaxValue2
				| ("nvarchar",         String("max"),            null      ) with n = MaxValue2
				| ("nvarchar",         null,                     null      ) with n = 1               => SqlDataType.VarChar       (systemType ?? typeof(String), n)
				| ("text",             null,                     null      )                          => SqlDataType.Text          (systemType ?? typeof(String))
				| ("ntext",            null,                     null      )                          => SqlDataType.NText         (systemType ?? typeof(String))
				| ("image",            null,                     null      )                          => SqlDataType.Image         (systemType ?? typeof(array[byte]))
				| ("binary",           Int32(n),                 null      ) when n >= 1 && n <= 8000
				| ("binary",           null,                     null      ) with n = 1               => SqlDataType.Binary        (systemType ?? typeof(String), n)
				| ("varbinary",        Int32(n),                 null      ) when n >= 1 && n <= 8000 || n == MaxValue2
				| ("varbinary",        String("max"),            null      ) with n = MaxValue2
				| ("varbinary",        null,                     null      ) with n = 1               => SqlDataType.VarBinary     (systemType ?? typeof(String), n)
				| ("xml",              String("CONTENT"  as s1), String(s2)) 
				| ("xml",              String("DOCUMENT" as s1), String(s2))                          => SqlDataType.Xml           (systemType ?? typeof(String), s1, s2)
				| ("date",             null,                     null      )                          => SqlDataType.Date          (systemType ?? typeof(DateTime))
				| ("time",             null,                     null      )                          => SqlDataType.Time          (systemType ?? typeof(DateTime))
				| ("datetime",         null,                     null      )                          => SqlDataType.DateTime      (systemType ?? typeof(DateTime))
				| ("datetime2",        null,                     null      )                          => SqlDataType.DateTime2     (systemType ?? typeof(DateTime))
				| ("smalldatetime",    null,                     null      )                          => SqlDataType.SmallDateTime (systemType ?? typeof(DateTime))
				| ("datetimeoffset",   null,                     null      )                          => SqlDataType.DateTimeOffset(systemType ?? typeof(DateTimeOffset))
				| ("rowversion",       null,                     null      )                          => SqlDataType.Timestamp     (systemType ?? typeof(array[byte]))
				| ("uniqueidentifier", null,                     null      )                          => SqlDataType.Guid          (systemType ?? typeof(Guid))
				| ("sql_variant",      null,                     null      )                          => SqlDataType.Variant       (systemType ?? typeof(object))
				| ("geography",        null,                     null      )                          => SqlDataType.Geography     (systemType ?? typeof(object))
				| ("geometry",         null,                     null      )                          => SqlDataType.Geometry      (systemType ?? typeof(object))
				| ("",                 _,                        _         )
				| ("bit",              _,                        _         )
				| ("tinyint",          _,                        _         )
				| ("smallint",         _,                        _         )
				| ("int",              _,                        _         )
				| ("bigint",           _,                        _         )
				| ("real",             _,                        _         )
				| ("float",            _,                        _         )
				| ("decimal",          _,                        _         )
				| ("numeric",          _,                        _         )
				| ("char",             _,                        _         )
				| ("varchar",          _,                        _         )
				| ("nchar",            _,                        _         )
				| ("nvarchar",         _,                        _         )
				| ("text",             _,                        _         )
				| ("ntext",            _,                        _         )
				| ("image",            _,                        _         )
				| ("binary",           _,                        _         )
				| ("varbinary",        _,                        _         )
				| ("xml",              _,                        _         )
				| ("date",             _,                        _         )
				| ("time",             _,                        _         )
				| ("datetime",         _,                        _         )
				| ("datetime2",        _,                        _         )
				| ("smalldatetime",    _,                        _         )
				| ("datetimeoffset",   _,                        _         )
				| ("rowversion",       _,                        _         )
				| ("uniqueidentifier", _,                        _         )
				| ("sql_variant",      _,                        _         )
				| ("geography",        _,                        _         )
				| ("geometry",         _,                        _         ) => throw exception()
				| _ => SqlDataType.Unknown(systemType ?? typeof(object), normName(value.Trim()))
			}
		}

		public CanBeNull : bool
		{
			get
			{
				SystemType.IsValueType == false ||
				SystemType.IsGenericType && SystemType.GetGenericTypeDefinition() == typeof(Nullable[_]) ||
				typeof(INullable).IsAssignableFrom(SystemType)
			}
		}
	}
}
