using System;
using System.Linq;
using System.Text;

using Nemerle;
using Nemerle.Assertions;

namespace LinqToDB_Temp.SqlBuilder
{
	using Extensions;

	[Record]
	public variant SqlDataType
	{
		| Char           { Length : int }
		| VarChar        { Length : int }
		| Text           { Length : int }
		| NChar          { Length : int }
		| NVarChar       { Length : int }
		| NText          { Length : int }
		| Binary         { Length : int }
		| VarBinary      { Length : int }
		| Image          
		| Boolean        
		| Guid           
		| SByte          
		| Int16          
		| Int32          
		| Int64          
		| Byte           
		| UInt16         
		| UInt32         
		| UInt64         
		| Single         
		| Double         
		| Decimal        { Precision : int; Scale : int }
		| Money          { Precision : int; Scale : int }
		| SmallMoney     { Precision : int; Scale : int }
		| Date           
		| Time           
		| DateTime       
		| DateTime2      
		| SmallDateTime  
		| DateTimeOffset 
		| Timestamp      
		| Xml            
		| Variant        
		| VarNumeric     

		public SystemType : Type { get; }

		static _decimalMaxDisplaySize : int = decimal.MaxValue.ToString().Length;
		static _sbyteMaxDisplaySize   : int = SByte.  MaxValue.ToString().Length;
		static _int16MaxDisplaySize   : int = Int16.  MaxValue.ToString().Length;
		static _int32MaxDisplaySize   : int = Int32.  MaxValue.ToString().Length;
		static _int64MaxDisplaySize   : int = Int64.  MaxValue.ToString().Length;
		static _byteMaxDisplaySize    : int = Byte.   MaxValue.ToString().Length;
		static _uint16MaxDisplaySize  : int = UInt16. MaxValue.ToString().Length;
		static _uint32MaxDisplaySize  : int = UInt32. MaxValue.ToString().Length;
		static _uint64MaxDisplaySize  : int = UInt64. MaxValue.ToString().Length;

		public MaxDisplaySize : int
		{
			get
			{
				match (this)
				{
					| Char           =>                       8000
					| VarChar        =>                       8000
					| Text           =>               int.MaxValue
					| NChar          =>                       4000
					| NVarChar       =>                       4000
					| NText          =>               int.MaxValue
					| Binary         =>                       8000
					| VarBinary      =>                       8000
					| Image          =>               int.MaxValue
					| Boolean        =>                          1
					| Guid           =>                         36
					| SByte          =>   _sbyteMaxDisplaySize + 1
					| Int16          =>   _int16MaxDisplaySize + 1
					| Int32          =>   _int32MaxDisplaySize + 1
					| Int64          =>   _int64MaxDisplaySize + 1
					| Byte           =>    _byteMaxDisplaySize + 1
					| UInt16         =>  _uint16MaxDisplaySize + 1
					| UInt32         =>  _uint32MaxDisplaySize + 1
					| UInt64         =>  _uint64MaxDisplaySize + 1
					| Single         =>                  7 + 2 + 4
					| Double         =>                 15 + 2 + 5
					| Decimal        => _decimalMaxDisplaySize + 1
					| Money          =>                   19 + 2-1
					| SmallMoney     =>                     10 + 2
					| Date           =>                         10
					| Time           =>                         16
					| DateTime       =>                         23
					| DateTime2      =>                         27
					| SmallDateTime  =>                         19
					| DateTimeOffset =>                         34
					| Timestamp      =>                         -1
					| Xml            =>                         -1
					| Variant        =>                         -1
					| VarNumeric     =>                         -1
				}
			}
		}

		public IsString : bool
		{
			get
			{
				match (this)
				{
					| Char    
					| VarChar 
					| Text    
					| NChar   
					| NVarChar
					| NText    => SystemType != typeof(char)
					| _        => false
				}
			}
		}
		
		public override ToString() : string
		{
			match (this)
			{
				| Image                      => "Image"
				| Boolean                    => "Boolean"
				| Guid                       => "Guid"
				| SByte                      => "SByte"
				| Int16                      => "Int16"
				| Int32                      => "Int32"
				| Int64                      => "Int64"
				| Byte                       => "Byte"
				| UInt16                     => "UInt16"
				| UInt32                     => "UInt32"
				| UInt64                     => "UInt64"
				| Single                     => "Single"
				| Double                     => "Double"
				| Date                       => "Date"
				| Time                       => "Time"
				| DateTime                   => "DateTime"
				| DateTime2                  => "DateTime2"
				| SmallDateTime              => "SmallDateTime"
				| DateTimeOffset             => "DateTimeOffset"
				| Timestamp                  => "Timestamp"
				| Xml                        => "Xml"
				| Variant                    => "Variant"
				| VarNumeric                 => "VarNumeric"
				| Char       (len) with name =  "Char"
				| VarChar    (len) with name =  "VarChar"
				| Text       (len) with name =  "Text"
				| NChar      (len) with name =  "NChar"
				| NVarChar   (len) with name =  "NVarChar"
				| NText      (len) with name =  "NText"
				| Binary     (len) with name =  "Binary"
				| VarBinary  (len) with name =  "VarBinary"  => if (len > 0) $"$name($len)" else name
				| Decimal    (p,s) with name =  "Decimal"
				| Money      (p,s) with name =  "Money"
				| SmallMoney (p,s) with name =  "SmallMoney" => if (p > 0) $"$name($p,$s)" else name
			}
		}

		public static @:(type : Type) : SqlDataType
		{
			match (type.ToUnderlying().ToCode(true))
			{
				| String         => SqlDataType.NVarChar      (type, 4000)
				| Char           => SqlDataType.NChar         (type, 1)
				| Boolean        => SqlDataType.Boolean       (type)
				| SByte          => SqlDataType.SByte         (type)
				| Int16          => SqlDataType.Int16         (type)
				| Int32          => SqlDataType.Int32         (type)
				| Int64          => SqlDataType.Int64         (type)
				| Byte           => SqlDataType.Byte          (type)
				| UInt16         => SqlDataType.UInt16        (type)
				| UInt32         => SqlDataType.UInt32        (type)
				| UInt64         => SqlDataType.UInt64        (type)
				| Single         => SqlDataType.Single        (type)
				| Double         => SqlDataType.Double        (type)
				| Decimal        => SqlDataType.Decimal       (type, _decimalMaxDisplaySize, _decimalMaxDisplaySize)
				| DateTime       => SqlDataType.DateTime      (type)
				| Object         => SqlDataType.Variant       (type)
				| Guid           => SqlDataType.Guid          (type)
				| ArrayOfByte    
				| Binary         => SqlDataType.VarBinary     (type, 8000)
				| TimeSpan       => SqlDataType.Time          (type)
				| DateTimeOffset => SqlDataType.DateTimeOffset(type)
				| XmlReader      => SqlDataType.Xml           (type)
				| Unknown        => throw InvalidOperationException()
			}
		}

		public EqualsUnderlying(type : SqlDataType) : bool
		{
			SystemType.ToUnderlying() == type.SystemType.ToUnderlying()
		}
	}
}
