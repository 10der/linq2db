using System;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Extensions;

namespace LinqToDB_Temp.SqlBuilder
{
	[StructuralEquality]
	public variant SqlPredicate
	{
		| Not        { Predicate : SqlPredicate }
		| And        {     Expr1 : SqlPredicate;                    Expr2  : SqlPredicate; }
		| Or         {     Expr1 : SqlPredicate;                    Expr2  : SqlPredicate; }
		| Compare    {     Expr1 : SqlExpr; Operator : SqlOperator; Expr2  : SqlExpr;      } // { expression { = | <> | != | > | >= | ! > | < | <= | !< } expression
		| Like       {     Expr1 : SqlExpr; Expr2    : SqlExpr;     Escape : SqlExpr;      } // string_expression [ NOT ] LIKE string_expression [ ESCAPE 'escape_character' ]
		| Between    {     Expr1 : SqlExpr; Expr2    : SqlExpr;     Expr3  : SqlExpr;      } // expression [ NOT ] BETWEEN expression AND expression
		| IsNull     { new Expr  : SqlExpr;                                                } // expression IS [ NOT ] NULL
		| InQuery    { new Expr  : SqlExpr; Query    : SqlQuery;                           } // expression [ NOT ] IN ( subquery )
		| InList     { new Expr  : SqlExpr; Values   : list[SqlExpr];                      } // expression [ NOT ] IN ( subquery | expression [ ,...n ] )
		| Expression { new Expr  : SqlExpr; new Precedence : int;
			public this([NotNull] expr : SqlExpr)
			{
				this(expr, expr.Precedence)
			}
		}

		public Precedence : int
		{
			get
			{
				match (this)
				{
					| And              => Precedence.LogicalConjunction
					| Or               => Precedence.LogicalDisjunction
					| Not (And)
					| Not (Or)
					| Not (Expression) => Precedence.LogicalNegation
					| Expression(_, p) => p
					| _                => Precedence.Comparison
				}
			}
		}

		public IsNullable : bool
		{
			get
			{
				match (this)
				{
					| Not       (p)             => p.IsNullable
					| And       (e1,    e2)
					| Or        (e1,    e2)     => e1.IsNullable || e2.IsNullable
					| Compare   (e1, _, e2)
					| Like      (e1,    e2,  _) => e1.IsNullable || e2.IsNullable
					| Between   (e1,    e2, e3) => e1.IsNullable || e2.IsNullable || e3.IsNullable
					| IsNull    (e)             => e.IsNullable
					| InQuery   (e, q)          => e.IsNullable  || q.IsNullable
					| InList    (e, vs)         => e.IsNullable  || vs.Find(_.IsNullable).IsSome
					| Expression(e, _)          => e.IsNullable
				}
			}
		}
		
		public override ToString() : string
		{
			match (this)
			{
				| Not(Like      (e1, e2, null))                         => $"$e1 NOT LIKE $e2"
				| Not(Like      (e1, e2, e))                            => $"$e1 NOT LIKE $e2 ESCAPE $e"
				| Not(Between   (e1, e2, e3))                           => $"$e1 NOT BETWEEN $e2 AND $e3"
				| Not(IsNull    (e))                                    => $"$e IS NOT NULL"
				| Not(InQuery   (e, q))                                 => $"$e NOT IN ($q)"
				| Not(InList    (e, vs))                                => $"$e NOT IN (..$vs)"
				| Not(p)                                                => $"NOT ($p)"
				|     And       (e1, e2)                                => $"($e1) AND ($e2)"
				|     Or        (e1, e2)                                => $"($e1) OR ($e2)"
				|     Expression(e, _)                                  => e.ToString()
				|     Compare   (e1, Equal,          e2) with op = "="
				|     Compare   (e1, NotEqual,       e2) with op = "<>"
				|     Compare   (e1, Greater,        e2) with op = ">"
				|     Compare   (e1, GreaterOrEqual, e2) with op = ">="
				|     Compare   (e1, NotGreater,     e2) with op = "!>"
				|     Compare   (e1, Less,           e2) with op = "<"
				|     Compare   (e1, LessOrEqual,    e2) with op = "<="
				|     Compare   (e1, NotLess,        e2) with op = "!<" => $"$e1 $op $e2"
				|     Like      (e1, e2, null)                          => $"$e1 LIKE $e2"
				|     Like      (e1, e2, e)                             => $"$e1 LIKE $e2 ESCAPE $e"
				|     Between   (e1, e2, e3)                            => $"$e1 BETWEEN $e2 AND $e3"
				|     IsNull    (e)                                     => $"$e IS NULL"
				|     InQuery   (e, q)                                  => $"$e IN ($q)"
				|     InList    (e, vs)                                 => $"$e IN (..$vs)"
			}
		}

		public static @: (v : System.String ) : SqlPredicate { SqlPredicate.Expression(SqlExpr.Value(SqlValue.String (v))) }
		public static @: (v : System.Char   ) : SqlPredicate { SqlPredicate.Expression(SqlExpr.Value(SqlValue.Char   (v))) }
		public static @: (v : System.Boolean) : SqlPredicate { SqlPredicate.Expression(SqlExpr.Value(SqlValue.Boolean(v))) }
		public static @: (v : System.SByte  ) : SqlPredicate { SqlPredicate.Expression(SqlExpr.Value(SqlValue.SByte  (v))) }
		public static @: (v : System.Int16  ) : SqlPredicate { SqlPredicate.Expression(SqlExpr.Value(SqlValue.Int16  (v))) }
		public static @: (v : System.Int32  ) : SqlPredicate { SqlPredicate.Expression(SqlExpr.Value(SqlValue.Int32  (v))) }
		public static @: (v : System.Int64  ) : SqlPredicate { SqlPredicate.Expression(SqlExpr.Value(SqlValue.Int64  (v))) }
		public static @: (v : System.Byte   ) : SqlPredicate { SqlPredicate.Expression(SqlExpr.Value(SqlValue.Byte   (v))) }
		public static @: (v : System.UInt16 ) : SqlPredicate { SqlPredicate.Expression(SqlExpr.Value(SqlValue.UInt16 (v))) }
		public static @: (v : System.UInt32 ) : SqlPredicate { SqlPredicate.Expression(SqlExpr.Value(SqlValue.UInt32 (v))) }
		public static @: (v : System.UInt64 ) : SqlPredicate { SqlPredicate.Expression(SqlExpr.Value(SqlValue.UInt64 (v))) }
		public static @: (v : System.Single ) : SqlPredicate { SqlPredicate.Expression(SqlExpr.Value(SqlValue.Single (v))) }
		public static @: (v : System.Double ) : SqlPredicate { SqlPredicate.Expression(SqlExpr.Value(SqlValue.Double (v))) }
		public static @: (v : System.Decimal) : SqlPredicate { SqlPredicate.Expression(SqlExpr.Value(SqlValue.Decimal(v))) }
	}
}
