using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Xml.Linq;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Linq;

namespace LinqToDB_Temp.Metadata
{
	using Common;
	using Extensions;

	public class XmlAttributeReader : IMetadataReader
	{
		_types : Hashtable[string,TypeInfo];

		public this(xmlFile : string)
		{
			this(xmlFile, Assembly.GetCallingAssembly())
		}

		public this([NotNull] xmlFile : string, [NotNull] assembly : Assembly)
		{
			mutable streamReader : StreamReader = null;

			try
			{
				if (File.Exists(xmlFile))
				{
					streamReader = File.OpenText(xmlFile);
				}
				else
				{
					def combinePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, xmlFile);

					when (File.Exists(combinePath))
						streamReader = File.OpenText(combinePath);
				}

				def embedded = streamReader == null;
				def stream   = if (embedded) assembly.GetManifestResourceStream(xmlFile) else streamReader.BaseStream;
				def stream   =
					if (embedded && stream == null)
					{
						def names   = assembly.GetManifestResourceNames();
						def xmlFile = "." + xmlFile;
						def name    = names.FirstOrDefault(_.EndsWith(xmlFile));

						if (name != null) assembly.GetManifestResourceStream(name) else null
					}
					else
						null;

				if (stream == null)
					throw MetadataException($"Could not find file '$xmlFile'.")
				else
					using (stream)
						_types = LoadStream(stream, xmlFile);
			}
			finally
			{
				when (streamReader != null)
					streamReader.Close()
			}
		}

		public this ([NotNull] xmlDocStream : Stream)
		{
			_types = LoadStream(xmlDocStream, "")
		}

		LoadStream (xmlDocStream : Stream, fileName : string) : Hashtable[string,TypeInfo]
		{
			def getAttrs(el : XElement, exclude : string, typeName, memberName) : List[AttributeInfo]
			{
				def attrs = el.Elements().Where(e => e.Name.LocalName != exclude).Select(a =>
				{
					def aname = a.Name.LocalName;

					def values = a.Elements().Select(fun(e : XElement)
					{
						def name  = e.Name.LocalName;
						def value = e.Attribute("Value");
						def type  = e.Attribute("Type");

						when (value == null)
							throw MetadataException(
								if (memberName != null)
									$"'$fileName': Element <Type Name='$typeName'><Member Name='$memberName'><'$aname'><$name /> has to have 'Value' attribute."
								else
									$"'$fileName': Element <Type Name='$typeName'><'$aname'><$name /> has to have 'Value' attribute.");

						def value =
							if (type != null)
								Converter.ChangeType(value.Value, Type.GetType(type.Value, true));
							else
								value.Value;

						(name, value)
					});

					AttributeInfo(aname, values.ToHashtable((n,_) => n, (_,v) => v))
				});

				attrs.ToList()
			}

			def doc = XDocument.Load(StreamReader(xmlDocStream));

			doc.Root.Elements().Where(e => e.Name.LocalName == "Type").Select(t =>
			{
				def tname = t.Attribute("Name");
				when (tname == null)
					throw MetadataException($"'$fileName': Element 'Type' has to have 'Name' attribute.");
				def tname = tname.Value;

				def members = t.Elements().Where(e => e.Name.LocalName == "Member").Select(m =>
				{
					def mname = m.Attribute("Name");
					when (mname == null)
						throw MetadataException($"'$fileName': Element <Type Name='$tname'><Member /> has to have 'Name' attribute.");
					def mname = mname.Value;

					MemberInfo(mname, getAttrs(m, null, tname, mname))
				});

				TypeInfo(tname, members.ToHashtable(m => m.Name), getAttrs(t, "Member", tname, null))
			})
			.ToHashtable(t => t.Name);
		}

		public GetAttributes[TAttribute](type : Type) : array[TAttribute]
			where TAttribute : Attribute
			ensures value == null || value.Length != 0
		{
			match (_types.Get(type.FullName) ?? _types.Get(type.Name))
			{
				| Some(t) =>
					def atype = typeof(TAttribute);
					t.GetAttribute(atype).Map(a => a.MakeAttribute(atype) :> TAttribute)
				| _ => null
			}
		}

		public GetAttributes[TAttribute](type : Type, memberName : string) : array[TAttribute]
			where TAttribute : Attribute
			ensures value == null || value.Length != 0
		{
			match (_types.Get(type.FullName) ?? _types.Get(type.Name))
			{
				| Some(t) =>
					match (t.Members.Get(memberName))
					{
						| Some(m) =>
							def atype = typeof(TAttribute);
							m.GetAttribute(atype).Map(a => a.MakeAttribute(atype) :> TAttribute)
						| _ => null
					}
				| _ => null
			}
		}
	}
}
