using System;

using Nemerle;
using Nemerle.Extensions;

namespace LinqToDB_Temp.Metadata
{
	public class SystemDataLinqAttributeReader : IMetadataReader
	{
		_reader : AttributeReader = AttributeReader();

		public GetAttributes[T](type : Type) : list[T]
			where T : class, Attribute
		{
			if (typeof(T) == typeof(TableAttribute))
			{
				def ta = _reader.GetAttributes.[System.Data.Linq.Mapping.TableAttribute]  (type);
				def da = _reader.GetAttributes.[System.Data.Linq.Mapping.DatabaseAttribute](type);

				match (ta, da)
				{
					| ([t], [] ) with d = null
					| ([],  [d]) with t = null
					| ([t], [d]) =>

						def attr = TableAttribute();

						when (t != null)
						{
							def name = t.Name;

							when (name != null)
							{
								def names = name.Replace("[", "").Replace("]", "").Split('.');

								match (names.Length)
								{
									| 0 => ()
									| 1 => attr.Name = names[0]
									| 2 =>
										attr.Name   = names[0];
										attr.Schema = names[1]
									| _ => throw MetadataException($"Invalid table name '$name' of type '$(type.FullName)'")
								}
							}
						}

						when (d != null)
							attr.Database = d.Name;

						[attr :> T]

					| _ => []
				}
			}
			else
				[]
		}

		public GetAttributes[T](type : Type, memberName : string) : list[T]
			where T : class, Attribute
		{
			if (typeof(T) == typeof(ColumnAttribute))
			{
				match (_reader.GetAttributes.[System.Data.Linq.Mapping.ColumnAttribute](type, memberName))
				{
					| [c] =>

						def attr = ColumnAttribute() <-
						{
							Name   = c.Name;
							DbType = c.DbType;
						};

						[attr :> T]
						
					| _  => []
				}
			}
			else
				[]
		}
	}
}
