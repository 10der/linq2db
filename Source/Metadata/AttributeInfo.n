using System;
using System.Linq;
using System.Linq.Expressions;
using System.Linq.Expressions.Expression;
using System.Reflection;

using Nemerle;
using Nemerle.Collections;

namespace LinqToDB_Temp.Metadata
{
	using Common;
	using Extensions;

	[Record]
	public class AttributeInfo
	{
		public Name   : string;
		public Values : Hashtable[string,object];

		[RecordIgnore] mutable _func : Func[Attribute];

		public MakeAttribute(type : Type) : Attribute
		{
			when (_func == null)
			{
				def ctors = type.GetConstructors(BindingFlags.Instance | BindingFlags.Public);
				def ctor  = ctors.FirstOrDefault(c => c.GetParameters().Length == 0);

				if (ctor != null)
				{
					def expr = Lambda.[Func[Attribute]](
						Convert(
							MemberInit(
								New(ctor),
								Values.Map(k =>
								{
									def member = type.GetMember(k.Key)[0];
									def type   = member.GetMemberType();
						
									Bind(member, Constant(Converter.ChangeType(k.Value, type), type))
								})),
							typeof(Attribute)));

					_func = expr.Compile();
				}
				else
				{
					throw NotImplementedException();
				}
			}

			_func()
		}
	}
}
