using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq.Expressions;
using System.Linq.Expressions.Expression;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;

namespace LinqToDB_Temp.Mapping
{
	using Common;
	using Extensions;
	using MacroInternal.Mapping;

	public class MappingSchema
	{
		public static Default : MappingSchema = MappingSchema();

		public this(baseSchema : MappingSchema = null)
		{
			BaseSchema  = baseSchema;
		}

		public BaseSchema  : MappingSchema { get; }

		_convertInfo  : ConvertInfo = ConvertInfo();
		_defaultValue = Hashtable();

		public virtual GetDefaultValue(type : Type) : object
		{
			match (_defaultValue.Get(type))
			{
				| Some(v)                   => v
				| _ when BaseSchema != null => BaseSchema.GetDefaultValue(type)
				| _                         => DefaultValue.GetValue(type)
			}
		}

		public SetDefaultValue[T](value : T) : void
		{
			_defaultValue[typeof(T)] = value
		}

		public GetConvertExpression[TFrom,TTo]() : Expression[Func[TFrom,TTo]]
		{
			def (ex,_) = GetConverter(typeof(TFrom), typeof(TTo), true).Value;
			ReduceDefaultValue(ex) :> Expression[Func[TFrom,TTo]]
		}

		public GetConvertExpression(from : Type, to : Type) : LambdaExpression
		{
			def (ex,_) = GetConverter(from, to, true).Value;
			ReduceDefaultValue(ex) :> LambdaExpression
		}

		public GetConverter[TFrom,TTo]() : Func[TFrom,TTo]
		{
			match (GetConverter(typeof(TFrom), typeof(TTo), true).Value)
			{
				| (ex, null) =>
					def rex = ReduceDefaultValue(ex) :> Expression[Func[TFrom,TTo]];
					def l   = rex.Compile();
					_convertInfo.Set(typeof(TFrom), typeof(TTo), (ex, l));
					l
				| (_,  l) => l :> Func[TFrom,TTo]
			}
		}

		public SetConvertExpression[TFrom,TTo]([NotNull] expr : Expression[Func[TFrom,TTo]], addNullCheck : bool = true) : void
		{
			def expr  = if (addNullCheck && expr.Find(Converter.IsDefaultValuePlaceHolder) == null) AddNullCheck(expr) else expr;
			_convertInfo.Set(typeof(TFrom), typeof(TTo), (expr, null))
		}

		public SetConverter[TFrom,TTo]([NotNull] func : Func[TFrom,TTo]) : void
		{
			def p  = Parameter(typeof(TFrom), "p");
			def ex = Lambda.[Func[TFrom,TTo]](Invoke(Constant(func), p), p);

			_convertInfo.Set(typeof(TFrom), typeof(TTo), (ex, func));
		}

		AddNullCheck(expr : LambdaExpression) : LambdaExpression
		{
			match (expr.Parameters[0])
			{
				| p when p.Type.IsNullable() with test = PropertyOrField(p, "HasValue")
				| p when p.Type.IsClass      with test = NotEqual(p, Constant(null, p.Type)) =>
					Lambda(
						Condition(test, expr.Body, DefaultValueExpression(expr.Body.Type)),
						expr.Parameters)
				| _ => expr
			}
		}

		protected GetConverter(from : Type, to : Type, create : bool) : option[LambdaExpression * Delegate]
		{
			def expr = match (_convertInfo.Get(from, to, false))
			{
				| None when BaseSchema != null =>
					match (BaseSchema.GetConverter(from, to, false))
					{
						| Some((ex,_)) => Some((ex, null))
						| ex           => ex
					}
				| ex => ex
			}

			match (expr)
			{
				| None when create =>

					def ufrom = from.ToNullableUnderlying();
					def uto   = to.  ToNullableUnderlying();
					def ex    =
						if (from != ufrom)
						{
							match (GetConverter(ufrom, to, false))
							{
								| Some((Lambda(b,ps),_)) =>

									// For int? -> byte try to find int -> byte and convert int to int?
									//
									def p = Expression.Parameter(from, ps[0].Name);
									Some(Lambda(
										b.Transform(e => if (ReferenceEquals(e, ps[0])) Convert(p, ufrom) else e),
										p))

								| None when to != uto =>

									match (GetConverter(ufrom, uto, false))
									{
										| Some((Lambda(b,ps),_)) =>

											// For int? -> byte? try to find int -> byte and convert int to int? and result to byte?
											//
											def p = Expression.Parameter(from, ps[0].Name);
											Some(Lambda(
												Convert(
													b.Transform(e => if (ReferenceEquals(e, ps[0])) Convert(p, ufrom) else e),
													to),
												p))

										| _ => None()
									}

								| _ => None()
							}
						}
						else if (to != uto)
						{
							// For int? -> byte? try to find int -> byte and convert int to int? and result to byte?
							//
							match (GetConverter(from, uto, false))
							{
								| Some((Lambda(b,ps),_)) => Some(Expression.Lambda(Expression.Convert(b, to), ps))
								| _ => None()
							}
						}
						else
							None();

					match (ex)
					{
						| Some(ex) => Some(AddNullCheck(ex), null)
						| _        =>
							def (ex,_) = ConvertInfo.Default.Get(from, to).Value;
							Some(ex, null)
					}

				| ex => ex
			}
		}

		ReduceDefaultValue(expr : Expression) : Expression
		{
			expr.Transform(e =>
				if (Converter.IsDefaultValuePlaceHolder(e))
					Constant(GetDefaultValue(e.Type), e.Type)
				else
					e);
		}

		public SetCultureInfo(info : CultureInfo) : void
		{
			SetCultureExpr(SByte);
			SetCultureExpr(Int16);
			SetCultureExpr(Int32);
			SetCultureExpr(Int64);
			SetCultureExpr(Byte);
			SetCultureExpr(UInt16);
			SetCultureExpr(UInt32);
			SetCultureExpr(UInt64);
			SetCultureExpr(Single);
			SetCultureExpr(Double);
			SetCultureExpr(Decimal);
			SetCultureExpr(DateTime,       DateTimeFormat);
			SetCultureExpr(DateTimeOffset, DateTimeFormat);
		}
	}
}
