using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Linq.Expressions.Expression;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;

namespace LinqToDB_Temp.Mapping
{
	using Common;
	using Extensions;

	public class MappingSchema
	{
		public static Default : MappingSchema = MappingSchema();

		public this(baseSchema : MappingSchema = null)
		{
			BaseSchema  = baseSchema;
			ConvertInfo = ConvertInfo();
		}

		public BaseSchema  : MappingSchema { get; }
		public ConvertInfo : ConvertInfo   { get; }

		_defaultValue = Hashtable();

		public virtual GetDefaultValue(type : Type) : object
		{
			match (_defaultValue.Get(type))
			{
				| Some(v)                   => v
				| _ when BaseSchema != null => BaseSchema.GetDefaultValue(type)
				| _                         => DefaultValue.GetValue(type)
			}
		}

		public SetDefaultValue[T](value : T) : void
		{
			_defaultValue[typeof(T)] = value
		}

		public GetConvertExpression[TFrom,TTo](reduceDefaultValue : bool = true) : Expression[Func[TFrom,TTo]]
		{
			def expr = match (ConvertInfo.Get(typeof(TFrom), typeof(TTo), false))
			{
				| Some((ex,_))              => ex :> Expression[Func[TFrom,TTo]]
				| _ when BaseSchema != null => BaseSchema.GetConvertExpression(false)
				| _                         => Convert[TFrom,TTo].Expression
			}

			if (reduceDefaultValue)
				ReduceDefaultValue(expr) :> Expression[Func[TFrom,TTo]]
			else
				expr
		}

		public GetConvertExpression(from : Type, to : Type, reduceDefaultValue : bool = true) : LambdaExpression
		{
			def expr = match (ConvertInfo.Get(from, to, false))
			{
				| Some((ex,_))                 => ex
				| None when BaseSchema != null => BaseSchema.GetConvertExpression(false)
				| None                         =>
					def (ex,_) = ConvertInfo.Default.Get(from, to).Value;
					ex
			}

			if (reduceDefaultValue)
				ReduceDefaultValue(expr) :> LambdaExpression
			else
				expr
		}

		public GetConverter[TFrom,TTo]() : Func[TFrom,TTo]
		{
			match (ConvertInfo.Get(typeof(TFrom), typeof(TTo), false))
			{
				| Some((_,l)) => l :> Func[TFrom,TTo]
				| _ when BaseSchema != null with ex = BaseSchema.GetConvertExpression(false)
				| _                         with ex = Convert[TFrom,TTo].Expression =>   //// wrong type inference
					SetConvertExpression(ex);
					GetConverter()
			}
		}

		public SetConvertExpression	[TFrom,TTo]([NotNull] expr : Expression[Func[TFrom,TTo]]) : void
		{
			def rexpr = ReduceDefaultValue(expr) :> Expression[Func[TFrom,TTo]];
			ConvertInfo.Set(typeof(TFrom), typeof(TTo), (expr, rexpr.Compile()))
		}

		public SetConverter[TFrom,TTo]([NotNull] func : Func[TFrom,TTo]) : void
		{
			def p  = Parameter(typeof(TFrom), "p");
			def ex = Lambda.[Func[TFrom,TTo]](Invoke(Constant(func), p), p);
			ConvertInfo.Set(typeof(TFrom), typeof(TTo), (ex, func));
		}

		ReduceDefaultValue(expr : Expression) : Expression
		{
			expr.Transform(fun(e : Expression)
			{
				| Member(null, member) when
					member.DeclaringType.IsGenericType &&
					member.Name == "Value" &&
					member.DeclaringType.GetGenericTypeDefinition() == typeof(DefaultValue[_])
				| _ is DefaultValueExpression => 
					Expression.Constant(GetDefaultValue(e.Type), e.Type)
				| _ => e
			});
		}
	}
}
