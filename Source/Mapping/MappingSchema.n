using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq.Expressions;
using System.Linq.Expressions.Expression;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;

namespace LinqToDB_Temp.Mapping
{
	using Common;
	using Extensions;
	using MacroInternal;
	using MacroInternal.Mapping;
	using Metadata;

	public class MappingSchema
	{
		#region Init

		public this(params schemas : array[MappingSchema])
		{
			this(null, schemas)
		}

		public this(configuration : string, params schemas : array[MappingSchema])
		{
			this(configuration, if (schemas == null || schemas.Length == 0) null else  schemas.NToList());
		}

		public this(configuration : string = null, schemas : list[MappingSchema] = null)
		{
			Configuration = configuration;

			Schemas =
				this ::
				match (schemas)
				{
					| null => [ MappingSchema.Default ]
					| [ ]  => []
					| [s]  => s.Schemas
					| ss   =>
						def map = HashSet();

						def compact(l : list[MappingSchema]) : list[MappingSchema]
						{
							match (l)
							{
								| []     => []
								| h :: t =>
									def tl = compact(t);
									if (map.Add(h)) h :: tl else tl
							}
						}

						compact($[ s | s in ss, s in s.Schemas ])
				}
		}

		public Schemas : list[MappingSchema] { get; }

		#endregion

		#region Default Values

		_defaultValues = Hashtable();

		public GetDefaultValue(type : Type) : object
		{
			def getValue(schemas)
			{
				| []     => DefaultValue.GetValue(type)
				| h :: t =>
					match (h._defaultValues.Get(type))
					{
						| Some(v) => v
						| _       => getValue(t)
					}
			}

			getValue(Schemas)
		}

		public SetDefaultValue[T](value : T) : void
		{
			_defaultValues[typeof(T)] = value
		}

		#endregion

		#region Convert

		_convertInfo  : ConvertInfo = ConvertInfo();

		public GetConvertExpression[TFrom,TTo]() : Expression[Func[TFrom,TTo]]
		{
			def (ex,_) = GetConverter(typeof(TFrom), typeof(TTo), true).Value;
			ReduceDefaultValue(ex) :> Expression[Func[TFrom,TTo]]
		}

		public GetConvertExpression(from : Type, to : Type) : LambdaExpression
		{
			def (ex,_) = GetConverter(from, to, true).Value;
			ReduceDefaultValue(ex) :> LambdaExpression
		}

		public GetConverter[TFrom,TTo]() : Func[TFrom,TTo]
		{
			match (GetConverter(typeof(TFrom), typeof(TTo), true).Value)
			{
				| (ex, null) =>
					def rex = ReduceDefaultValue(ex) :> Expression[Func[TFrom,TTo]];
					def l   = rex.Compile();
					_convertInfo.Set(typeof(TFrom), typeof(TTo), (ex, l));
					l
				| (_,  l) => l :> Func[TFrom,TTo]
			}
		}

		public SetConvertExpression[TFrom,TTo]([NotNull] expr : Expression[Func[TFrom,TTo]], addNullCheck : bool = true) : void
		{
			def expr  = if (addNullCheck && expr.Find(Converter.IsDefaultValuePlaceHolder) == null) AddNullCheck(expr) else expr;
			_convertInfo.Set(typeof(TFrom), typeof(TTo), (expr, null))
		}

		public SetConverter[TFrom,TTo]([NotNull] func : Func[TFrom,TTo]) : void
		{
			def p  = Parameter(typeof(TFrom), "p");
			def ex = Lambda.[Func[TFrom,TTo]](Invoke(Constant(func), p), p);

			_convertInfo.Set(typeof(TFrom), typeof(TTo), (ex, func));
		}

		AddNullCheck(expr : LambdaExpression) : LambdaExpression
		{
			match (expr.Parameters[0])
			{
				| p when p.Type.IsNullable() with test = PropertyOrField(p, "HasValue")
				| p when p.Type.IsClass      with test = NotEqual(p, Constant(null, p.Type)) =>
					Lambda(
						Condition(test, expr.Body, DefaultValueExpression(expr.Body.Type)),
						expr.Parameters)
				| _ => expr
			}
		}

		protected GetConverter(from : Type, to : Type, create : bool) : option[LambdaExpression * Delegate]
		{
			def getConverter(schemas)
			{
				| []     => None()
				| h :: t =>
					match (h._convertInfo.Get(from, to, false))
					{
						| Some((ex,_)) => Some(ex, null)
						| _            => getConverter(t)
					}
			}

			match (getConverter(Schemas))
			{
				| None when create =>

					def ufrom = from.ToNullableUnderlying();
					def uto   = to.  ToNullableUnderlying();
					def ex    =
						if (from != ufrom)
						{
							match (GetConverter(ufrom, to, false))
							{
								| Some((Lambda(b,ps),_)) =>

									// For int? -> byte try to find int -> byte and convert int to int?
									//
									def p = Expression.Parameter(from, ps[0].Name);
									Some(Lambda(
										b.Transform(e => if (e === ps[0]) Convert(p, ufrom) else e),
										p))

								| None when to != uto =>

									match (GetConverter(ufrom, uto, false))
									{
										| Some((Lambda(b,ps),_)) =>

											// For int? -> byte? try to find int -> byte and convert int to int? and result to byte?
											//
											def p = Expression.Parameter(from, ps[0].Name);
											Some(Lambda(
												Convert(
													b.Transform(e => if (e === ps[0]) Convert(p, ufrom) else e),
													to),
												p))

										| _ => None()
									}

								| _ => None()
							}
						}
						else if (to != uto)
						{
							// For int? -> byte? try to find int -> byte and convert int to int? and result to byte?
							//
							match (GetConverter(from, uto, false))
							{
								| Some((Lambda(b,ps),_)) => Some(Expression.Lambda(Expression.Convert(b, to), ps))
								| _ => None()
							}
						}
						else
							None();

					match (ex)
					{
						| Some(ex) => Some(AddNullCheck(ex), null)
						| _        =>
							def (ex,_) = ConvertInfo.Default.Get(from, to).Value;
							Some(ex, null)
					}

				| ex => ex
			}
		}

		ReduceDefaultValue(expr : Expression) : Expression
		{
			expr.Transform(e =>
				if (Converter.IsDefaultValuePlaceHolder(e))
					Constant(GetDefaultValue(e.Type), e.Type)
				else
					e);
		}

		public SetCultureInfo(info : CultureInfo) : void
		{
			SetCultureExpr(SByte);
			SetCultureExpr(Int16);
			SetCultureExpr(Int32);
			SetCultureExpr(Int64);
			SetCultureExpr(Byte);
			SetCultureExpr(UInt16);
			SetCultureExpr(UInt32);
			SetCultureExpr(UInt64);
			SetCultureExpr(Single);
			SetCultureExpr(Double);
			SetCultureExpr(Decimal);
			SetCultureExpr(DateTime,       DateTimeFormat);
			SetCultureExpr(DateTimeOffset, DateTimeFormat);
		}

		#endregion

		#region MetadataReader

		protected mutable _metadataReader : IMetadataReader;
		public             MetadataReader : IMetadataReader
		{
			get
			{
				when (_metadataReader == null)
					_metadataReader = MetadataReader();
				_metadataReader
			}
			set
			{
				_metadataReader = value
			}
		}

		public GetAttributes[T](type : Type) : list[T]
			where T : class, Attribute
		{
			$[ a | s in Schemas, a in s._metadataReader?.GetAttributes(type) ?? [] ]
		}

		public GetAttributes[T](type : Type, memberName : string) : list[T]
			where T : class, Attribute
		{
			$[ a | s in Schemas, a in s._metadataReader?.GetAttributes(type, memberName) ?? [] ]
		}

		public GetAttribute[T](type : Type) : T
			where T : class, Attribute
		{
			match (GetAttributes(type))
			{
				| []     => null
				| h :: _ => h
			}
		}
		
		public GetAttribute[T](type : Type, memberName : string) : T
			where T : class, Attribute
		{
			match (GetAttributes(type, memberName))
			{
				| []     => null
				| h :: _ => h
			}
		}

		public GetAttributes[T](type : Type, configGetter : T -> string) : list[T]
			where T : class, Attribute
		{
			$[ a | c in ConfigurationList, a in GetAttributes(type), (configGetter(a) ?? "") == c ]
		}

		public GetAttributes[T](type : Type, memberName : string, configGetter : T -> string) : list[T]
			where T : class, Attribute
		{
			$[ a | c in ConfigurationList, a in GetAttributes(type, memberName), (configGetter(a) ?? "") == c ]
		}

		public GetAttribute[T](type : Type, configGetter : T -> string) : T
			where T : class, Attribute
		{
			match (GetAttributes(type, configGetter))
			{
				| []     => null
				| h :: _ => h
			}
		}
		
		public GetAttribute[T](type : Type, memberName : string, configGetter : T -> string) : T
			where T : class, Attribute
		{
			match (GetAttributes(type, memberName, configGetter))
			{
				| []     => null
				| h :: _ => h
			}
		}

		public GetAttributes[T](type : Type, configGetter : Func[T,string]) : list[T]
			where T : class, Attribute
		{
			GetAttributes(type, configGetter.Invoke)
		}

		public GetAttributes[T](type : Type, memberName : string, configGetter : Func[T,string]) : list[T]
			where T : class, Attribute
		{
			GetAttributes(type, memberName, configGetter.Invoke)
		}

		public GetAttribute[T](type : Type, configGetter : Func[T,string]) : T
			where T : class, Attribute
		{
			GetAttribute(type, configGetter.Invoke)
		}
		
		public GetAttribute[T](type : Type, memberName : string, configGetter : Func[T,string]) : T
			where T : class, Attribute
		{
			GetAttribute(type, memberName, configGetter.Invoke)
		}

		#endregion

		#region Configuration

		public Configuration : string { get; }

		private ConfigurationList : list[string]
		{
			mutable _configurationList : list[string];

			get
			{
				when (_configurationList == null)
				{
					def hash = HashSet();

					def getConfig(schemas : list[MappingSchema])
					{
						| []     => []
						| h :: t =>
							if (h.Configuration != null && hash.Add(h.Configuration))
								h.Configuration :: getConfig(t)
							else
								getConfig(t)
					}

					def l = getConfig(Schemas);

					_configurationList = if (Configuration != null) Configuration :: l else l
				}

				_configurationList
			}
		}

		#endregion

		#region DefaultMappingSchema

		public static Default : MappingSchema = DefaultMappingSchema();

		class DefaultMappingSchema : MappingSchema
		{
			public this()
			{
				base("", []);
				_metadataReader = MetadataReader.Default;
			}
		}

		#endregion
	}
}
