using System;
using System.Collections.Generic;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

namespace LinqToDB.MacroInternal
{
	[MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Assembly)]
	macro TypeCode(params types : list[PExpr])
	{
		TypeCodeImpl.DoTransform(Macros.ImplicitCTX(), types)
	}

	module TypeCodeImpl
	{
		public DoTransform(typer : Typer, types : list[PExpr]) : void
		{
			Macros.DefineCTX(typer);
			
			//assert2(false);

			def mapToName(type : PExpr) : PExpr * PExpr.Ref
			{
				def fixedType = typer.BindFixedType(type);
				def name = 
					match (fixedType) // .FixedValue для FixedType вернет самого себя. В этом нет смысла.
					{
					  // Вот это была пожалуй первая серьезная ошибка. Свойство TypeInfo возвращает значение только для FixedType.Class.
					  // Для других типов (например, кортежей) оно вернет null. Соотвественно будет NRE в макросе. Надо так:
						| Array(FixedType.Class(ti, []),_) => <[ $($"ArrayOf$(ti.Name)" : usesite) ]>
						| Class(ti, [])                    => <[ $(ti.Name : usesite) ]>
						| _          => Message.FatalError(type.Location, "Expected user defined type without type parameters or array.")
					}
					
				(type, name)
			}
			
			def names = types.Map(mapToName);
			def elems = <[ decl: | Unknown ]> :: names.Map((_, name) => <[ decl: | $(name.name : name) ]>);
			def exprs = names.Map((t, name) => <[ _typeCodes.Add(typeof($t), LinqToDB_Temp.TypeCode.$name) ]>);

			def env = typer.Manager.CoreEnv.EnterIntoNamespace(["LinqToDB_Temp"]);

			env.Define(
				<[ decl:
					enum TypeCode
					{
						..$elems
					}
				]>).Compile();

			env.Define(
				<[ decl:
					module TypeExtensions
					{
						_typeCodes : Dictionary[Type,LinqToDB_Temp.TypeCode] = Dictionary();

						static this()
						{
							{ ..$exprs }
						}


						public ToCode(this type : Type) : LinqToDB_Temp.TypeCode
						{
							mutable code;
							
							if (_typeCodes.TryGetValue(type, out code))
								code
							else
								LinqToDB_Temp.TypeCode.Unknown
						}

						public ToCodeWithCheck(this type : Type) : LinqToDB_Temp.TypeCode
						{
							mutable code;
							
							if (_typeCodes.TryGetValue(type, out code))
								code
							else
								throw LinqToDB_Temp.LinqToDBException("There is no corresponding TypeCode for '"  + type.FullName + "'.")
						}
					}
				]>
			).Compile();
		}
	}
}
