using System;
using System.Collections.Generic;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

namespace LinqToDB.MacroInternal
{
	[MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Assembly)]
	macro TypeCode(params types : list[PExpr])
	{
		TypeCodeImpl.DoTransform(Macros.ImplicitCTX(), types)
	}

	module TypeCodeImpl
	{
		public DoTransform(typer : Typer, types : list[PExpr]) : void
		{
			Macros.DefineCTX(typer);
			
			//assert2(false);

			def mapToName(t : PExpr)
			{
				def fx = typer.BindFixedType(t);
				def nm = 
					match (fx.FixedValue)
					{
						| Array(t,_) => $"ArrayOf$(t.TypeInfo.Name)"
						| _          => fx.TypeInfo.Name
					}
					
				(t,nm)
			}
			
			def names = types.Map(mapToName);
			def elems = names.Map(fun((_,name)) { <[ decl: | $(name : usesite) ]> });
			def exprs = names.Map(fun((t,name)) { <[ _typeCodes.Add(typeof($t), LinqToDB_Temp.TypeCode.$(name : usesite)) ]> });

			def env = typer.Manager.CoreEnv.EnterIntoNamespace(["LinqToDB_Temp"]);

			_ = env.Define(
				<[ decl:
					enum TypeCode
					{
						..$elems
					}
				]>).Compile();

			_ = env.Define(
				<[ decl:
					module TypeExtensions
					{
						_typeCodes : Dictionary[Type,LinqToDB_Temp.TypeCode] = Dictionary();

						static this()
						{
							{ ..$exprs }
						}

						public ToCode(this type : Type) : LinqToDB_Temp.TypeCode
						{
							mutable code;
							
							if (_typeCodes.TryGetValue(type, out code))
								code
							else
								throw LinqToDB_Temp.LinqToDBException(string.Format("There is no corresponding TypeCode for '{0}'.", type.FullName))
						}
					}
				]>
			).Compile();
		}
	}
}
