using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

namespace LinqToDB_Temp.MacroInternal.Extensions
{
	macro TransformExpr(type : PExpr, params exprs : list[PExpr])
	syntax ("transform", type, "members", "(", exprs, ")")
	{
		AutomationImpl.DoTransformExpr(Macros.ImplicitCTX(), type, exprs)
	}

	macro Transform2Expr(type : PExpr, params exprs : list[PExpr])
	syntax ("transform2", type, "members", "(", exprs, ")")
	{
		AutomationImpl.DoTransform2Expr(Macros.ImplicitCTX(), type, exprs)
	}

	macro PathExpr(type : PExpr, params names : list[PExpr])
	syntax ("path", type, "members", "(", names, ")")
	{
		AutomationImpl.DoPathExpr(type, names)
	}

	macro VisitExpr(type : PExpr, params names : list[PExpr])
	syntax ("visit", type, "members", "(", names, ")")
	{
		AutomationImpl.DoVisitExpr(type, names)
	}

	macro FindExpr(type : PExpr, params names : list[PExpr])
	syntax ("find", type, "members", "(", names, ")")
	{
		AutomationImpl.DoFindExpr(type, names)
	}

	module AutomationImpl
	{
		public DoTransformExpr(_typer : Typer, type : PExpr, exprs : list[PExpr]) : PExpr
		{
			def func  = <[ $("func" : usesite) ]>;
			def expr  = <[ $("expr" : usesite) ]>;
			def e     = <[ $("e"    : usesite) ]>;
			def args = exprs.Map(fun(expr)
			{
				| <[ $(n : name) ]> => <[ Transform($e.$(n : name), $func) ]>
				| expr => expr
			});

			<[
				def ex = $func($expr);
				if (ReferenceEquals(ex, $expr))
				{
					def $e = $expr :> $type;
					$e.Update(..$args)
				}
				else
					ex
			]>
		}

		public DoTransform2Expr(_typer : Typer, type : PExpr, exprs : list[PExpr]) : PExpr
		{
			def func  = <[ $("func" : usesite) ]>;
			def expr  = <[ $("expr" : usesite) ]>;
			def e     = <[ $("e"    : usesite) ]>;
			def args = exprs.Map(fun(expr)
			{
				| <[ $(n : name) ]> => <[ Transform($e.$(n : name), $func) ]>
				| expr => expr
			});

			<[
				def ex = $func($expr);
				if (!ex.Stop && ReferenceEquals(ex, $expr))
				{
					def $e = $expr :> $type;
					$e.Update(..$args)
				}
				else
					ex.Expression
			]>
		}

		public DoPathExpr(type : PExpr, props : list[PExpr]) : PExpr
		{
			def path  = <[ $("pathExpr" : usesite) ]>;
			def func  = <[ $("func"     : usesite) ]>;
			def expr  = <[ $("expr"     : usesite) ]>;
			def p     = <[ $("p"        : usesite) ]>;
			def e     = <[ $("e"        : usesite) ]>;
			def calls = props.Map(fun(expr)
			{
				| <[ $(n : name) ]> => <[ Path($e.$(n : name), $p, InfoOf($type.$(n : name)), $func) ]>
				| expr => expr
			});

			<[
				def $p = ConvertTo($path, typeof($type));
				def $e = $expr :> $type;

				{ ..$calls }

				$p
			]>
		}

		public DoVisitExpr(type : PExpr, props : list[PExpr]) : PExpr
		{
			def func  = <[ $("func" : usesite) ]>;
			def expr  = <[ $("expr" : usesite) ]>;
			def e     = <[ $("e"    : usesite) ]>;
			def calls = props.Map(fun(expr)
			{
				| <[ $(n : name) ]> => <[ Visit($e.$(n : name), $func) ]>
				| expr => expr
			});

			<[
				def $e = $expr :> $type;
				{ ..$calls }
			]>
		}

		public DoFindExpr(type : PExpr, props : list[PExpr]) : PExpr
		{
			def func  = <[ $("func" : usesite) ]>;
			def expr  = <[ $("expr" : usesite) ]>;
			def e     = <[ $("e"    : usesite) ]>;
			def calls = props.Map(fun(expr)
			{
				| <[ $(n : name) ]> => <[ Find($e.$(n : name), $func) ]>
				| expr => expr
			});
			def call  = calls.Tail.Fold(calls.Head, (expr, acc) => <[ $expr ?? $acc ]>);

			<[
				def $e = $expr :> $type;
				$call
			]>
		}
	}
}
