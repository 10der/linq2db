using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

namespace LinqToDB_Temp.MacroInternal
{
	macro InfoOf(expr : PExpr)
	syntax ("infoof", "(", expr, ")")
	{
		match (InfoOfImpl.DoTransform(Macros.ImplicitCTX(), expr))
		{
			| Some((mi, Field))       => <[ $mi : FieldInfo       ]>
			| Some((mi, Property))    => <[ $mi : MethodInfo      ]>
			| Some((mi, Method))      => <[ $mi : MethodInfo      ]>
			| Some((mi, Constructor)) => <[ $mi : ConstructorInfo ]>
			| _ => Message.FatalError(expr.Location, "member expression expected.");
		}
	}

	macro FieldOf(expr : PExpr)
	syntax ("fieldof", "(", expr, ")")
	{
		match (InfoOfImpl.DoTransform(Macros.ImplicitCTX(), expr))
		{
			| Some((mi, Field)) => <[ $mi : FieldInfo ]>
			| _ => Message.FatalError(expr.Location, "field expression expected.");
		}
	}

	macro PropertyOf(expr : PExpr)
	syntax ("propertyof", "(", expr, ")")
	{
		match (InfoOfImpl.DoTransform(Macros.ImplicitCTX(), expr))
		{
			| Some((mi, Property)) => <[ $mi : MethodInfo ]>
			| _ => Message.FatalError(expr.Location, "property expression expected.");
		}
	}

	macro MethodOf(expr : PExpr)
	syntax ("methodof", "(", expr, ")")
	{
		match (InfoOfImpl.DoTransform(Macros.ImplicitCTX(), expr))
		{
			| Some((mi, Method)) => <[ $mi : MethodInfo ]>
			| _ => Message.FatalError(expr.Location, "method expression expected.");
		}
	}

	macro CtorOf(expr : PExpr)
	syntax ("ctorof", "(", expr, ")")
	{
		match (InfoOfImpl.DoTransform(Macros.ImplicitCTX(), expr))
		{
			| Some((mi, Constructor)) => <[ $mi : ConstructorInfo ]>
			| _ => Message.FatalError(expr.Location, "constructor expression expected.");
		}
	}

	module InfoOfImpl
	{
		public DoTransform(typer : Typer, expr : PExpr) : option[PExpr * MemberTypes]
		{
			def getInfo(ex : PExpr) : option[PExpr * MemberTypes]
			{
				def check(tex : TExpr)
				{
					| FieldMember        (to, mi is IField) with ty = to.Type
					| StaticRef          (ty, mi is IField, [])         => Some((<[ $(TExpr.FieldOf (ty, mi)                 : typed) ]>, MemberTypes.Field))
					| Call(PropertyMember(to, mi), _, _)    with ty = to.Type
					| PropertyMember     (to, mi)           with ty = to.Type
					| StaticPropertyRef  (ty, mi)                       => Some((<[ $(TExpr.MethodOf(ty, mi.GetGetter(), []) : typed) ]>, MemberTypes.Property))
					| Call(MethodRef     (to, mi, ps, _), _, _) with ty = to.Type
					| Call(StaticRef     (ty, mi is IMethod, ps), _, _) => Some((<[ $(TExpr.MethodOf (ty, mi, ps)            : typed) ]>, MemberTypes.Method))
					| Delayed(susp) when susp.IsResolved                => check(susp.ResolutionResult)
					| _ => None()
				}

				check(typer.TypeExpr(ex))
			}

			match (expr)
			{
				| <[ $inst . $meth ( ..$args ) ]> =>

					getInfo(
						if (typer.JustTry(fun() { getInfo(expr).IsSome })) expr
						else
						{
							def ex = <[ default($inst) . $meth ( ..$args ) ]>;

							if (typer.JustTry(fun() { getInfo(ex).IsSome })) ex
							else
							{
								def args = args.Map(fun(a) { <[ default($a)]>});
								<[ default($inst) . $meth ( ..$args ) ]>
							}
						})

				| <[ $inst . $mem ]> =>

					getInfo(
						if (typer.JustTry(fun() { getInfo(expr).IsSome })) expr
						else <[ default($inst).$mem ]>)

				| _ => getInfo(expr)
			}
		}
	}
}
