using System;
using System.Linq;

using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using Nemerle.Compiler.NemerleModifiers;

namespace LinqToDB_Temp.MacroInternal
{
	[MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Class, AllowMultiple = false)]
	macro ReplaceCtorParameter(typeBuilder : TypeBuilder, parameter : PExpr, expr : PExpr)
	{
		ReplaceCtorParameterImpl.DoTransform(Macros.ImplicitCTX(), typeBuilder, parameter, expr)
	}

	module ReplaceCtorParameterImpl
	{
		public DoTransform(_typer : Typer, typeBuilder : TypeBuilder, parameter : PExpr, expr : PExpr) : void
		{
			//Macros.DefineCTX(typer);

			def pname =
				match (parameter)
				{
					| <[ $(name : name) ]> => name
					| _ => Message.FatalError(parameter.Location, "Expected simple name")
				};

			def ctors = typeBuilder.LookupMember(".ctor")
				.OfType.[MethodBuilder]()
				.Where(m => m.Attributes %&& Public && m.Header.Parameters.Exists(p => p.Name == pname.Id));

			foreach (ctor in ctors)
			{
				ctor.Attributes = (ctor.Attributes & ~Public) | Private;

				def parameters = ctor.Header.Parameters;
				def nparams    = parameters.MapFiltered(p => p.Name != pname.Id, _.AsParsed());
				def exprs      = parameters.Map(p => if (p.Name == pname.Id) expr else p.ReferencingExpr);

				typeBuilder.Define(
				<[ decl:
					public this(..$nparams)
					{
						this(..$exprs)
					}
				]>);
			}
			otherwise
			  Message.Error(parameter.Location, $"Parameter '$parameter' not found.");
		}
	}
}
