using System;
using System.Data;
using System.Data.Linq;
using System.Xml;

using Nemerle;
using Nemerle.Collections;

namespace LinqToDB_Temp
{
	using Extensions;

	public module DataTypeExtensions
	{
		public ToSystemType(this type : DataType) : Type
		{
			| Char           
			| VarChar        
			| NChar          
			| NVarChar       
			| Text           
			| NText          => typeof(string)
			| Binary         
			| VarBinary      
			| Timestamp      
			| Image          => typeof(array[byte])
			| Boolean        => typeof(bool)
			| Guid           => typeof(Guid)
			| SByte          => typeof(sbyte)
			| Int16          => typeof(short)
			| Int32          => typeof(int)
			| Int64          => typeof(long)
			| Byte           => typeof(byte)
			| UInt16         => typeof(ushort)
			| UInt32         => typeof(uint)
			| UInt64         => typeof(ulong)
			| Single         => typeof(float)
			| Double         => typeof(double)
			| Decimal        
			| Money          
			| VarNumeric     
			| SmallMoney     => typeof(decimal)
			| Date           
			| DateTime       
			| DateTime2      
			| SmallDateTime  => typeof(DateTime)
			| Time           => typeof(TimeSpan)
			| DateTimeOffset => typeof(DateTimeOffset)
			| Xml            => typeof(string)
			| Variant        => typeof(object)
		}

		public ToDataType(this type : Type) : DataType
		{
			match (type.ToUnderlying().ToCodeWithCheck())
			{
				| String         => DataType.NVarChar
				| Boolean        => DataType.Boolean
				| SByte          => DataType.SByte
				| Int16          => DataType.Int16
				| Int32          => DataType.Int32
				| Int64          => DataType.Int64
				| Byte           => DataType.Byte
				| UInt16         => DataType.UInt16
				| UInt32         => DataType.UInt32
				| UInt64         => DataType.UInt64
				| Single         => DataType.Single
				| Double         => DataType.Double
				| Decimal        => DataType.Decimal
				| DateTime       => DataType.DateTime
				| Object         => DataType.Variant
				| Guid           => DataType.Guid
				| ArrayOfByte    
				| Binary         => DataType.VarBinary
				| TimeSpan       => DataType.Time
				| DateTimeOffset => DataType.DateTimeOffset
				| XmlReader      => DataType.Xml
				| Unknown        => throw InvalidOperationException()
			}
		}

		public ToSqlDbType(this type : DataType) : SqlDbType
		{
			| Char           => SqlDbType.Char      // text
			| VarChar        => SqlDbType.VarChar
			| NChar          => SqlDbType.NChar
			| NVarChar       => SqlDbType.NVarChar
			| Text           => SqlDbType.Text
			| NText          => SqlDbType.NText
			| Binary         => SqlDbType.Binary    // Binaries
			| VarBinary      => SqlDbType.VarBinary
			| Image          => SqlDbType.Image
			| Timestamp      => SqlDbType.Timestamp
			| SByte          => SqlDbType.SmallInt  // Integers
			| Int16          => SqlDbType.SmallInt
			| Int32          => SqlDbType.Int
			| Int64          => SqlDbType.BigInt
			| Byte           => SqlDbType.TinyInt
			| UInt16         => SqlDbType.Int
			| UInt32         => SqlDbType.BigInt
			| UInt64         => SqlDbType.Decimal 
			| Single         => SqlDbType.Real      // floats
			| Double         => SqlDbType.Float
			| Decimal        => SqlDbType.Decimal
			| Money          => SqlDbType.Money
			| SmallMoney     => SqlDbType.SmallMoney
			| Date           => SqlDbType.Date      // Date/time
			| Time           => SqlDbType.Time
			| DateTime       => SqlDbType.DateTime
			| DateTime2      => SqlDbType.DateTime2
			| SmallDateTime  => SqlDbType.SmallDateTime
			| DateTimeOffset => SqlDbType.DateTimeOffset
			| Boolean        => SqlDbType.Bit       // Other
			| Guid           => SqlDbType.UniqueIdentifier
			| Xml            => SqlDbType.Xml
			| Variant        => SqlDbType.Variant
			| VarNumeric     => SqlDbType.Decimal
		}

		public ToDataType(this type : SqlDbType) : DataType
		{
			| Char             => DataType.Char
			| VarChar          => DataType.VarChar
			| NChar            => DataType.NChar
			| NVarChar         => DataType.NVarChar
			| Text             => DataType.Text
			| NText            => DataType.NText
			| Binary           => DataType.Binary
			| VarBinary        => DataType.VarBinary
			| Image            => DataType.Image
			| Timestamp        => DataType.Timestamp
			| Bit              => DataType.Boolean
			| UniqueIdentifier => DataType.Guid
			| TinyInt          => DataType.Byte
			| SmallInt         => DataType.Int16
			| Int              => DataType.Int32
			| BigInt           => DataType.Int64
			| Real             => DataType.Single
			| Float            => DataType.Double
			| Decimal          => DataType.Decimal
			| Money            => DataType.Money
			| SmallMoney       => DataType.SmallMoney
			| Date             => DataType.Date
			| Time             => DataType.Time
			| DateTime         => DataType.DateTime
			| DateTime2        => DataType.DateTime2
			| SmallDateTime    => DataType.SmallDateTime
			| DateTimeOffset   => DataType.DateTimeOffset
			| Xml              => DataType.Xml
			| Variant          => DataType.Variant
			| Udt              
			| Structured       => throw NotImplementedException()
		}

		public ToDbType(this type : DataType) : DbType
		{
			| Char           => DbType.AnsiStringFixedLength
			| VarChar        
			| Text           => DbType.AnsiString
			| NChar          => DbType.StringFixedLength
			| NVarChar       
			| NText          => DbType.String
			| Binary         
			| VarBinary      
			| Image          
			| Timestamp      => DbType.Binary;
			| Boolean        => DbType.Boolean
			| Guid           => DbType.Guid
			| SByte          => DbType.SByte
			| Int16          => DbType.Int16
			| Int32          => DbType.Int32
			| Int64          => DbType.Int64
			| Byte           => DbType.Byte
			| UInt16         => DbType.UInt16
			| UInt32         => DbType.UInt32
			| UInt64         => DbType.UInt64
			| Single         => DbType.Single
			| Double         => DbType.Double
			| Decimal        => DbType.Decimal
			| Money          
			| SmallMoney     => DbType.Currency
			| Date           => DbType.Date
			| Time           => DbType.Time
			| DateTime       => DbType.DateTime
			| DateTime2      => DbType.DateTime2
			| SmallDateTime  => DbType.DateTime
			| DateTimeOffset => DbType.DateTimeOffset
			| Xml            => DbType.Xml
			| Variant        => DbType.Object
			| VarNumeric     => DbType.Decimal
		}

		public ToDataType(this type : DbType) : DataType
		{
			| AnsiStringFixedLength => DataType.Char
			| AnsiString            => DataType.VarChar
			| StringFixedLength     => DataType.NChar
			| String                => DataType.NVarChar
			| Binary                => DataType.VarBinary
			| Boolean               => DataType.Boolean
			| Guid                  => DataType.Guid
			| SByte                 => DataType.SByte
			| Int16                 => DataType.Int16
			| Int32                 => DataType.Int32
			| Int64                 => DataType.Int64
			| Byte                  => DataType.Byte
			| UInt16                => DataType.UInt16
			| UInt32                => DataType.UInt32
			| UInt64                => DataType.UInt64
			| Single                => DataType.Single
			| Double                => DataType.Double
			| Decimal               => DataType.Decimal
			| Currency              => DataType.Money
			| Date                  => DataType.Date
			| Time                  => DataType.Time
			| DateTime              => DataType.DateTime
			| DateTime2             => DataType.DateTime2
			| DateTimeOffset        => DataType.DateTimeOffset
			| Xml                   => DataType.Xml
			| Object                => DataType.Variant
			| VarNumeric            => DataType.VarNumeric
		}
	}
}
