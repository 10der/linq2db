using System;
using System.Linq.Expressions;

using Nemerle.Utility;

using LinqToDB_Temp.SqlBuilder;

[assembly:LinqToDB.MacroInternal.TypeCode(
	System.String,
	System.Char,
	System.Boolean,
	System.SByte,
	System.Int16,
	System.Int32,
	System.Int64,
	System.Byte,
	System.UInt16,
	System.UInt32,
	System.UInt64,
	System.Single,
	System.Double,
	System.Decimal,
	System.DateTime,
	System.Object,
	System.Guid,
	array[byte],
	System.Data.Linq.Binary,
	System.TimeSpan,
	System.DateTimeOffset,
	System.Xml.XmlReader
)]

[assembly: ExtensionPattern(Expression, Lambda(body,   parameters) = LambdaExpression     where (Body        = body,   Parameters = parameters))]
[assembly: ExtensionPattern(Expression, Call  (method, args)       = MethodCallExpression where (Method      = method, Arguments  = args))]
[assembly: ExtensionPattern(Expression, Unary (operand)            = UnaryExpression      where (Operand     = operand))]
[assembly: ExtensionPattern(Expression, Member(member)             = MemberExpression     where (Member      = member))]
[assembly: ExtensionPattern(Expression, New   (constructor)        = NewExpression        where (Constructor = constructor))]

[assembly: ExtensionPattern(SqlPredicate, Expr  (expr)   = SqlPredicate.Expression(expr,         _))]
[assembly: ExtensionPattern(SqlPredicate, Value (value)  = SqlPredicate.Expression(Value(value), _))]
[assembly: ExtensionPattern(SqlPredicate, @<&&> (p1, p2) = SqlPredicate.And(p1, p2))]
[assembly: ExtensionPattern(SqlPredicate, @<||> (p1, p2) = SqlPredicate.Or (p1, p2))]

[assembly: ExtensionPattern(SqlPredicate, @<=>  (p1, p2) = SqlPredicate.Compare(p1, Equal,          p2))]
[assembly: ExtensionPattern(SqlPredicate, @<==> (p1, p2) = SqlPredicate.Compare(p1, Equal,          p2))]
[assembly: ExtensionPattern(SqlPredicate, @<<>> (p1, p2) = SqlPredicate.Compare(p1, NotEqual,       p2))]
[assembly: ExtensionPattern(SqlPredicate, @<!=> (p1, p2) = SqlPredicate.Compare(p1, NotEqual,       p2))]
[assembly: ExtensionPattern(SqlPredicate, @<>>  (p1, p2) = SqlPredicate.Compare(p1, Greater,        p2))]
[assembly: ExtensionPattern(SqlPredicate, @<>=> (p1, p2) = SqlPredicate.Compare(p1, GreaterOrEqual, p2))]
[assembly: ExtensionPattern(SqlPredicate, @<!>> (p1, p2) = SqlPredicate.Compare(p1, NotGreater,     p2))]
[assembly: ExtensionPattern(SqlPredicate, @<<>  (p1, p2) = SqlPredicate.Compare(p1, Less,           p2))]
[assembly: ExtensionPattern(SqlPredicate, @<<=> (p1, p2) = SqlPredicate.Compare(p1, LessOrEqual,    p2))]
[assembly: ExtensionPattern(SqlPredicate, @<!<> (p1, p2) = SqlPredicate.Compare(p1, NotLess,        p2))]
[assembly: ExtensionPattern(SqlPredicate, @<?>  (p1, p2) = SqlPredicate.Compare(p1, op,             p2))]

[assembly: ExtensionPattern(SqlExpr,      @<+>  (expr1, expr2) = SqlExpr.Binary(expr1, "+", expr2))]
[assembly: ExtensionPattern(SqlExpr,      @<->  (expr1, expr2) = SqlExpr.Binary(expr1, "-", expr2))]
[assembly: ExtensionPattern(SqlExpr,      @<*>  (expr1, expr2) = SqlExpr.Binary(expr1, "*", expr2))]
