using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

using Nemerle;
using Nemerle.Imperative;

namespace LinqToDB_Temp.Extensions
{
	using MacroInternal;

	public module LinqExpressionExtensions
	{
		#region IsConstant

		public IsConstantable(this type : Type) : bool
		{
			match (Type.GetTypeCode(type.ToUnderlying()))
			{
				| Int16
				| Int32
				| Int64
				| UInt16
				| UInt32
				| UInt64
				| SByte
				| Byte
				| Decimal
				| Double
				| Single
				| Boolean
				| String
				| Char    => true
				| _       => false
			}
		}

		#endregion

		#region EqualsTo

/*
		public EqualsTo(this expr1 : Expression, expr2 : Expression, queryableAccessorDic : Dictionary[Expression,Func[Expression,IQueryable]]) : bool
		{
			if (expr1 == expr2)
				true
			else if (expr1 == null || expr2 == null || expr1.NodeType != expr2.NodeType || expr1.Type != expr2.Type)
				false
			else match (expr1.NodeType)
			{
				| ExpressionType.Add
				| ExpressionType.AddChecked
				| ExpressionType.And
				| ExpressionType.AndAlso
				| ExpressionType.ArrayIndex
#if FW4 || SILVERLIGHT
				| ExpressionType.Assign
#endif
				| ExpressionType.Coalesce
				| ExpressionType.Divide
				| ExpressionType.Equal
				| ExpressionType.ExclusiveOr
				| ExpressionType.GreaterThan
				| ExpressionType.GreaterThanOrEqual
				| ExpressionType.LeftShift
				| ExpressionType.LessThan
				| ExpressionType.LessThanOrEqual
				| ExpressionType.Modulo
				| ExpressionType.Multiply
				| ExpressionType.MultiplyChecked
				| ExpressionType.NotEqual
				| ExpressionType.Or
				| ExpressionType.OrElse
				| ExpressionType.Power
				| ExpressionType.RightShift
				| ExpressionType.Subtract
				| ExpressionType.SubtractChecked =>

					def e1 = expr1 :> BinaryExpression;
					def e2 = expr2 :> BinaryExpression;

					e1.Method == e2.Method &&
					e1.Conversion.EqualsTo(e2.Conversion, queryableAccessorDic) &&
					e1.Left.      EqualsTo(e2.Left,       queryableAccessorDic) &&
					e1.Right.     EqualsTo(e2.Right,      queryableAccessorDic)

				| ExpressionType.ArrayLength
				| ExpressionType.Convert
				| ExpressionType.ConvertChecked
				| ExpressionType.Negate
				| ExpressionType.NegateChecked
				| ExpressionType.Not
				| ExpressionType.Quote
				| ExpressionType.TypeAs
				| ExpressionType.UnaryPlus =>

					def e1 = expr1 :> UnaryExpression;
					def e2 = expr2 :> UnaryExpression;

					e1.Method == e2.Method && e1.Operand.EqualsTo(e2.Operand, queryableAccessorDic)

				| ExpressionType.Call =>

					def e1 = expr1 :> MethodCallExpression;
					def e2 = expr2 :> MethodCallExpression;

					when (e1.Arguments.Count != e2.Arguments.Count || e1.Method != e2.Method)
						return false;

					when (queryableAccessorDic.Count > 0)
					{
						mutable func;

						when (queryableAccessorDic.TryGetValue(expr1, out func))
							return func(expr1).Expression.EqualsTo(func(expr2).Expression, queryableAccessorDic);
					}

					when (!e1.Object.EqualsTo(e2.Object, queryableAccessorDic))
						return false;

					for (mutable i = 0; i < e1.Arguments.Count; i++)
						when (!e1.Arguments[i].EqualsTo(e2.Arguments[i], queryableAccessorDic))
							return false;

					true

				| ExpressionType.Conditional =>

					def e1 = expr1 :> ConditionalExpression;
					def e2 = expr2 :> ConditionalExpression;

					e1.Test.   EqualsTo(e2.Test,    queryableAccessorDic) &&
					e1.IfTrue. EqualsTo(e2.IfTrue,  queryableAccessorDic) &&
					e1.IfFalse.EqualsTo(e2.IfFalse, queryableAccessorDic);

				| ExpressionType.Constant =>

					def e1 = expr1 :> ConstantExpression;
					def e2 = expr2 :> ConstantExpression;

					e1.Type == e2.Type && (e1.Value == null && e2.Value == null || !e1.Type.IsConstantable() || Equals(e1.Value, e2.Value))

				| ExpressionType.Invoke =>

					def e1 = expr1 :> InvocationExpression;
					def e2 = expr2 :> InvocationExpression;

					when (e1.Arguments.Count != e2.Arguments.Count || !e1.Expression.EqualsTo(e2.Expression, queryableAccessorDic))
						return false;

					for (mutable i = 0; i < e1.Arguments.Count; i++)
						when (!e1.Arguments[i].EqualsTo(e2.Arguments[i], queryableAccessorDic))
							return false;

					true;

				| ExpressionType.Lambda =>

					def e1 = expr1 :> LambdaExpression;
					def e2 = expr2 :> LambdaExpression;

					when (e1.Parameters.Count != e2.Parameters.Count || !e1.Body.EqualsTo(e2.Body, queryableAccessorDic))
						return false;

					for (mutable i = 0; i < e1.Parameters.Count; i++)
						when (!e1.Parameters[i].EqualsTo(e2.Parameters[i], queryableAccessorDic))
							return false;

					true;

				| ExpressionType.ListInit =>

					def e1 = expr1 :> ListInitExpression;
					def e2 = expr2 :> ListInitExpression;

					when (e1.Initializers.Count != e2.Initializers.Count || !e1.NewExpression.EqualsTo(e2.NewExpression, queryableAccessorDic))
						return false;

					for (mutable i = 0; i < e1.Initializers.Count; i++)
					{
						def i1 = e1.Initializers[i];
						def i2 = e2.Initializers[i];

						when (i1.Arguments.Count != i2.Arguments.Count || i1.AddMethod != i2.AddMethod)
							return false;

						for (mutable j = 0; j < i1.Arguments.Count; j++)
							when (!i1.Arguments[j].EqualsTo(i2.Arguments[j], queryableAccessorDic))
								return false;
					}

					true;

				| ExpressionType.MemberAccess =>

					def e1 = expr1 :> MemberExpression;
					def e2 = expr2 :> MemberExpression;

					if (e1.Member == e2.Member)
					{
						when (e1.Expression == e2.Expression)
						{
							when (queryableAccessorDic.Count > 0)
							{
								mutable func;

								when (queryableAccessorDic.TryGetValue(expr1, out func))
									return func(expr1).Expression.EqualsTo(func(expr2).Expression, queryableAccessorDic);
							}
						}

						e1.Expression.EqualsTo(e2.Expression, queryableAccessorDic);
					}
					else
						false

				| ExpressionType.MemberInit =>

					def e1 = expr1 :> MemberInitExpression;
					def e2 = expr2 :> MemberInitExpression;

					when (e1.Bindings.Count != e2.Bindings.Count || !e1.NewExpression.EqualsTo(e2.NewExpression, queryableAccessorDic))
						return false;

					def compareBindings (b1 : MemberBinding, b2 : MemberBinding) : bool
					{
						when (b1 == b2)
							return true;

						when (b1 == null || b2 == null || b1.BindingType != b2.BindingType || b1.Member != b2.Member)
							return false;

						match (b1.BindingType)
						{
							| MemberBindingType.Assignment =>
								return (b1 :> MemberAssignment).Expression.EqualsTo((b2 :> MemberAssignment).Expression, queryableAccessorDic);

							| MemberBindingType.ListBinding => 
								def ml1 = b1 :> MemberListBinding;
								def ml2 = b2 :> MemberListBinding;

								when (ml1.Initializers.Count != ml2.Initializers.Count)
									return false;

								for (mutable i = 0; i < ml1.Initializers.Count; i++)
								{
									def ei1 = ml1.Initializers[i];
									def ei2 = ml2.Initializers[i];

									when (ei1.AddMethod != ei2.AddMethod || ei1.Arguments.Count != ei2.Arguments.Count)
										return false;

									for (mutable j = 0; j < ei1.Arguments.Count; j++)
										when (!ei1.Arguments[j].EqualsTo(ei2.Arguments[j], queryableAccessorDic))
											return false;
								}

								true;

							| MemberBindingType.MemberBinding =>
								def mm1 = b1 :> MemberMemberBinding;
								def mm2 = b2 :> MemberMemberBinding;

								when (mm1.Bindings.Count != mm2.Bindings.Count)
									return false;

								for (mutable i = 0; i < mm1.Bindings.Count; i++)
									when (!compareBindings(mm1.Bindings[i], mm2.Bindings[i]))
										return false;

								true;
						}
					}

					for (mutable i = 0; i < e1.Bindings.Count; i++)
					{
						def b1 = e1.Bindings[i];
						def b2 = e2.Bindings[i];

						when (!compareBindings(b1, b2))
							return false;
					}

					true

				| ExpressionType.New =>

					def e1 = expr1 :> NewExpression;
					def e2 = expr2 :> NewExpression;

					when (e1.Arguments.Count != e2.Arguments.Count)
						return false;

					when (e1.Members == null && e2.Members != null)
						return false;

					when (e1.Members != null && e2.Members == null)
						return false;

					when (e1.Constructor != e2.Constructor)
						return false;

					when (e1.Members != null)
					{
						when (e1.Members.Count != e2.Members.Count)
							return false;

						for (mutable i = 0; i < e1.Members.Count; i++)
							when (e1.Members[i] != e2.Members[i])
								return false;
					}

					for (mutable i = 0; i < e1.Arguments.Count; i++)
						when (!e1.Arguments[i].EqualsTo(e2.Arguments[i], queryableAccessorDic))
							return false;

					true;

				| ExpressionType.NewArrayBounds
				| ExpressionType.NewArrayInit =>

					def e1 = expr1 :> NewArrayExpression;
					def e2 = expr2 :> NewArrayExpression;

					when (e1.Expressions.Count != e2.Expressions.Count)
						return false;

					for (mutable i = 0; i < e1.Expressions.Count; i++)
						when (!e1.Expressions[i].EqualsTo(e2.Expressions[i], queryableAccessorDic))
							return false;

					true;

				| ExpressionType.Parameter =>

					def e1 = expr1 :> ParameterExpression;
					def e2 = expr2 :> ParameterExpression;
					e1.Name == e2.Name;

				| ExpressionType.TypeIs =>

					def e1 = expr1 :> TypeBinaryExpression;
					def e2 = expr2 :> TypeBinaryExpression;
					e1.TypeOperand == e2.TypeOperand && e1.Expression.EqualsTo(e2.Expression, queryableAccessorDic);

#if FW4 || SILVERLIGHT

				| ExpressionType.Block =>

					def e1 = expr1 :> BlockExpression;
					def e2 = expr2 :> BlockExpression;

					for (mutable i = 0; i < e1.Expressions.Count; i++)
						when (!e1.Expressions[i].EqualsTo(e2.Expressions[i], queryableAccessorDic))
							return false;

					for (mutable i = 0; i < e1.Variables.Count; i++)
						when (!e1.Variables[i].EqualsTo(e2.Variables[i], queryableAccessorDic))
							return false;

					true;

#endif

				//| _ => throw new InvalidOperationException()
			}
		}
*/

		#endregion

/*
		#region Path

		ConvertTo(expr : Expression, type : Type) : Expression
		{
			Expression.Convert(expr, type);
		}

		Path[T](source : IEnumerable[T], path : Expression, property : MethodInfo, func : Action[T,Expression]) : void
			where T : class
		{
			def prop = Expression.Property(path, property);
			mutable i = 0;
			foreach (item in source)
				func(item, Expression.Call(prop, ReflectionHelper.IndexExpressor[T].Item, array[ Expression.Constant({ i++; i }) ]));
		}

		Path[T](source : IEnumerable[T], path : Expression, property : MethodInfo, func : Action[Expression,Expression]) : void
			where T : Expression
		{
			def prop = Expression.Property(path, property);
			mutable i = 0;
			foreach (item in source)
				Path(item, Expression.Call(prop, ReflectionHelper.IndexExpressor<T>.Item, array[ Expression.Constant(i++) ]), func);
		}

		Path(expr : Expression, path : Expression, property : MethodInfo, func : Action[Expression,Expression]) : void
		{
			Path(expr, Expression.Property(path, property), func);
		}

		public Path(this expr : Expression, mutable path : Expression, func : Action[Expression,Expression]) : void
		{
			when (expr == null)
				return;

			match (expr.NodeType)
			{
				| ExpressionType.Add
				| ExpressionType.AddChecked
				| ExpressionType.And
				| ExpressionType.AndAlso
				| ExpressionType.ArrayIndex
#if FW4 || SILVERLIGHT
				| ExpressionType.Assign
#endif
				| ExpressionType.Coalesce
				| ExpressionType.Divide
				| ExpressionType.Equal
				| ExpressionType.ExclusiveOr
				| ExpressionType.GreaterThan
				| ExpressionType.GreaterThanOrEqual
				| ExpressionType.LeftShift
				| ExpressionType.LessThan
				| ExpressionType.LessThanOrEqual
				| ExpressionType.Modulo
				| ExpressionType.Multiply
				| ExpressionType.MultiplyChecked
				| ExpressionType.NotEqual
				| ExpressionType.Or
				| ExpressionType.OrElse
				| ExpressionType.Power
				| ExpressionType.RightShift
				| ExpressionType.Subtract
				| ExpressionType.SubtractChecked =>

					path  = ConvertTo(path, typeof(BinaryExpression));
					def e = expr :> BinaryExpression;

					Path(e.Conversion, path, ReflectionHelper.Binary.Conversion, func);
					Path(e.Left,       path, ReflectionHelper.Binary.Left,       func);
					Path(e.Right,      path, ReflectionHelper.Binary.Right,      func);

				| ExpressionType.ArrayLength
				| ExpressionType.Convert
				| ExpressionType.ConvertChecked
				| ExpressionType.Negate
				| ExpressionType.NegateChecked
				| ExpressionType.Not
				| ExpressionType.Quote
				| ExpressionType.TypeAs
				| ExpressionType.UnaryPlus =>

					Path(
						(expr :> UnaryExpression).Operand,
						path = ConvertTo(path, typeof(UnaryExpression)),
						ReflectionHelper.Unary.Operand,
						func);

				case ExpressionType.Call:
					{
						path  = ConvertTo(path, typeof(MethodCallExpression));
						var e = (MethodCallExpression)expr;

						Path(e.Object,    path, ReflectionHelper.MethodCall.Object,    func);
						Path(e.Arguments, path, ReflectionHelper.MethodCall.Arguments, func);

						break;
					}

				case ExpressionType.Conditional:
					{
						path  = ConvertTo(path, typeof(ConditionalExpression));
						var e = (ConditionalExpression)expr;

						Path(e.Test,    path, ReflectionHelper.Conditional.Test,    func);
						Path(e.IfTrue,  path, ReflectionHelper.Conditional.IfTrue,  func);
						Path(e.IfFalse, path, ReflectionHelper.Conditional.IfFalse, func);

						break;
					}

				case ExpressionType.Invoke:
					{
						path  = ConvertTo(path, typeof(InvocationExpression));
						var e = (InvocationExpression)expr;

						Path(e.Expression, path, ReflectionHelper.Invocation.Expression, func);
						Path(e.Arguments,  path, ReflectionHelper.Invocation.Arguments,  func);

						break;
					}

				case ExpressionType.Lambda:
					{
						path  = ConvertTo(path, typeof(LambdaExpression));
						var e = (LambdaExpression)expr;

						Path(e.Body,       path, ReflectionHelper.LambdaExpr.Body,       func);
						Path(e.Parameters, path, ReflectionHelper.LambdaExpr.Parameters, func);

						break;
					}

				case ExpressionType.ListInit:
					{
						path  = ConvertTo(path, typeof(ListInitExpression));
						var e = (ListInitExpression)expr;

						Path(e.NewExpression, path, ReflectionHelper.ListInit.NewExpression, func);
						Path(e.Initializers,  path, ReflectionHelper.ListInit.Initializers, (ex,p) => Path(ex.Arguments, p, ReflectionHelper.ElementInit.Arguments, func));

						break;
					}

				case ExpressionType.MemberAccess:
					Path(
						((MemberExpression)expr).Expression,
						path = ConvertTo(path, typeof(MemberExpression)),
						ReflectionHelper.Member.Expression,
						func);
					break;

				case ExpressionType.MemberInit:
					{
						Action<MemberBinding,Expression> modify = null; modify = (b,pinf) =>
						{
							switch (b.BindingType)
							{
								case MemberBindingType.Assignment:
									Path(
										((MemberAssignment)b).Expression,
										ConvertTo(pinf, typeof(MemberAssignment)),
										ReflectionHelper.MemberAssignmentBind.Expression,
										func);
									break;

								case MemberBindingType.ListBinding:
									Path(
										((MemberListBinding)b).Initializers,
										ConvertTo(pinf, typeof(MemberListBinding)),
										ReflectionHelper.MemberListBind.Initializers,
										(p,psi) => Path(p.Arguments, psi, ReflectionHelper.ElementInit.Arguments, func));
									break;

								case MemberBindingType.MemberBinding:
									Path(
										((MemberMemberBinding)b).Bindings,
										ConvertTo(pinf, typeof(MemberMemberBinding)),
										ReflectionHelper.MemberMemberBind.Bindings,
										modify);
									break;
							}
						};

						path  = ConvertTo(path, typeof(MemberInitExpression));
						var e = (MemberInitExpression)expr;

						Path(e.NewExpression, path, ReflectionHelper.MemberInit.NewExpression, func);
						Path(e.Bindings,      path, ReflectionHelper.MemberInit.Bindings,      modify);

						break;
					}

				case ExpressionType.New:
					Path(
						((NewExpression)expr).Arguments,
						path = ConvertTo(path, typeof(NewExpression)),
						ReflectionHelper.New.Arguments,
						func);
					break;

				case ExpressionType.NewArrayBounds:
					Path(
						((NewArrayExpression)expr).Expressions,
						path = ConvertTo(path, typeof(NewArrayExpression)),
						ReflectionHelper.NewArray.Expressions,
						func);
					break;

				case ExpressionType.NewArrayInit:
					Path(
						((NewArrayExpression)expr).Expressions,
						path = ConvertTo(path, typeof(NewArrayExpression)),
						ReflectionHelper.NewArray.Expressions,
						func);
					break;

				case ExpressionType.TypeIs:
					Path(
						((TypeBinaryExpression)expr).Expression,
						path = ConvertTo(path, typeof(TypeBinaryExpression)),
						ReflectionHelper.TypeBinary.Expression,
						func);
					break;

#if FW4 || SILVERLIGHT

				case ExpressionType.Block:
					{
						path  = ConvertTo(path, typeof(BlockExpression));
						var e = (BlockExpression)expr;

						Path(e.Expressions, path, ReflectionHelper.Block.Expressions, func);
						Path(e.Variables,   path, ReflectionHelper.Block.Variables,   func); // ?

						break;
					}

#endif

				case ExpressionType.Constant : path = ConvertTo(path, typeof(ConstantExpression));  break;
				case ExpressionType.Parameter: path = ConvertTo(path, typeof(ParameterExpression)); break;
			}

			func(expr, path);
		}

		#endregion

		#region Visit

		static void Visit<T>(IEnumerable<T> source, Action<T> func)
		{
			foreach (var item in source)
				func(item);
		}

		static void Visit<T>(IEnumerable<T> source, Action<Expression> func)
			where T : Expression
		{
			foreach (var item in source)
				Visit(item, func);
		}

		public static void Visit(this Expression expr, Action<Expression> func)
		{
			if (expr == null)
				return;

			switch (expr.NodeType)
			{
				case ExpressionType.Add:
				case ExpressionType.AddChecked:
				case ExpressionType.And:
				case ExpressionType.AndAlso:
				case ExpressionType.ArrayIndex:
#if FW4 || SILVERLIGHT
				case ExpressionType.Assign:
#endif
				case ExpressionType.Coalesce:
				case ExpressionType.Divide:
				case ExpressionType.Equal:
				case ExpressionType.ExclusiveOr:
				case ExpressionType.GreaterThan:
				case ExpressionType.GreaterThanOrEqual:
				case ExpressionType.LeftShift:
				case ExpressionType.LessThan:
				case ExpressionType.LessThanOrEqual:
				case ExpressionType.Modulo:
				case ExpressionType.Multiply:
				case ExpressionType.MultiplyChecked:
				case ExpressionType.NotEqual:
				case ExpressionType.Or:
				case ExpressionType.OrElse:
				case ExpressionType.Power:
				case ExpressionType.RightShift:
				case ExpressionType.Subtract:
				case ExpressionType.SubtractChecked:
					{
						var e = (BinaryExpression)expr;

						Visit(e.Conversion, func);
						Visit(e.Left,       func);
						Visit(e.Right,      func);

						break;
					}

				case ExpressionType.ArrayLength:
				case ExpressionType.Convert:
				case ExpressionType.ConvertChecked:
				case ExpressionType.Negate:
				case ExpressionType.NegateChecked:
				case ExpressionType.Not:
				case ExpressionType.Quote:
				case ExpressionType.TypeAs:
				case ExpressionType.UnaryPlus:
					Visit(((UnaryExpression)expr).Operand, func);
					break;

				case ExpressionType.Call:
					{
						var e = (MethodCallExpression)expr;

						Visit(e.Object,    func);
						Visit(e.Arguments, func);

						break;
					}

				case ExpressionType.Conditional:
					{
						var e = (ConditionalExpression)expr;

						Visit(e.Test,    func);
						Visit(e.IfTrue,  func);
						Visit(e.IfFalse, func);

						break;
					}

				case ExpressionType.Invoke:
					{
						var e = (InvocationExpression)expr;

						Visit(e.Expression, func);
						Visit(e.Arguments,  func);

						break;
					}

				case ExpressionType.Lambda:
					{
						var e = (LambdaExpression)expr;

						Visit(e.Body,       func);
						Visit(e.Parameters, func);

						break;
					}

				case ExpressionType.ListInit:
					{
						var e = (ListInitExpression)expr;

						Visit(e.NewExpression, func);
						Visit(e.Initializers,  ex => Visit(ex.Arguments, func));

						break;
					}

				case ExpressionType.MemberAccess: Visit(((MemberExpression)expr).Expression, func); break;

				case ExpressionType.MemberInit:
					{
						Action<MemberBinding> modify = null; modify = b =>
						{
							switch (b.BindingType)
							{
								case MemberBindingType.Assignment    : Visit(((MemberAssignment)b). Expression,   func);                          break;
								case MemberBindingType.ListBinding   : Visit(((MemberListBinding)b).Initializers, p => Visit(p.Arguments, func)); break;
								case MemberBindingType.MemberBinding : Visit(((MemberMemberBinding)b).Bindings,   modify);                        break;
							}
						};

						var e = (MemberInitExpression)expr;

						Visit(e.NewExpression, func);
						Visit(e.Bindings,      modify);

						break;
					}

				case ExpressionType.New            : Visit(((NewExpression)       expr).Arguments,   func); break;
				case ExpressionType.NewArrayBounds : Visit(((NewArrayExpression)  expr).Expressions, func); break;
				case ExpressionType.NewArrayInit   : Visit(((NewArrayExpression)  expr).Expressions, func); break;
				case ExpressionType.TypeIs         : Visit(((TypeBinaryExpression)expr).Expression,  func); break;

#if FW4 || SILVERLIGHT

				case ExpressionType.Block:
					{
						var e = (BlockExpression)expr;

						Visit(e.Expressions, func);
						Visit(e.Variables,   func);

						break;
					}

#endif

				case (ExpressionType)ChangeTypeExpression.ChangeTypeType :
					Visit(((ChangeTypeExpression)expr).Expression,  func); break;
			}

			func(expr);
		}

		static void Visit<T>(IEnumerable<T> source, Func<T,bool> func)
		{
			foreach (var item in source)
				func(item);
		}

		static void Visit<T>(IEnumerable<T> source, Func<Expression,bool> func)
			where T : Expression
		{
			foreach (var item in source)
				Visit(item, func);
		}

		public static void Visit(this Expression expr, Func<Expression,bool> func)
		{
			if (expr == null || !func(expr))
				return;

			switch (expr.NodeType)
			{
				case ExpressionType.Add:
				case ExpressionType.AddChecked:
				case ExpressionType.And:
				case ExpressionType.AndAlso:
				case ExpressionType.ArrayIndex:
#if FW4 || SILVERLIGHT
				case ExpressionType.Assign:
#endif
				case ExpressionType.Coalesce:
				case ExpressionType.Divide:
				case ExpressionType.Equal:
				case ExpressionType.ExclusiveOr:
				case ExpressionType.GreaterThan:
				case ExpressionType.GreaterThanOrEqual:
				case ExpressionType.LeftShift:
				case ExpressionType.LessThan:
				case ExpressionType.LessThanOrEqual:
				case ExpressionType.Modulo:
				case ExpressionType.Multiply:
				case ExpressionType.MultiplyChecked:
				case ExpressionType.NotEqual:
				case ExpressionType.Or:
				case ExpressionType.OrElse:
				case ExpressionType.Power:
				case ExpressionType.RightShift:
				case ExpressionType.Subtract:
				case ExpressionType.SubtractChecked:
					{
						var e = (BinaryExpression)expr;

						Visit(e.Conversion, func);
						Visit(e.Left,       func);
						Visit(e.Right,      func);

						break;
					}

				case ExpressionType.ArrayLength:
				case ExpressionType.Convert:
				case ExpressionType.ConvertChecked:
				case ExpressionType.Negate:
				case ExpressionType.NegateChecked:
				case ExpressionType.Not:
				case ExpressionType.Quote:
				case ExpressionType.TypeAs:
				case ExpressionType.UnaryPlus:
					Visit(((UnaryExpression)expr).Operand, func);
					break;

				case ExpressionType.Call:
					{
						var e = (MethodCallExpression)expr;

						Visit(e.Object,    func);
						Visit(e.Arguments, func);

						break;
					}

				case ExpressionType.Conditional:
					{
						var e = (ConditionalExpression)expr;

						Visit(e.Test,    func);
						Visit(e.IfTrue,  func);
						Visit(e.IfFalse, func);

						break;
					}

				case ExpressionType.Invoke:
					{
						var e = (InvocationExpression)expr;

						Visit(e.Expression, func);
						Visit(e.Arguments,  func);

						break;
					}

				case ExpressionType.Lambda:
					{
						var e = (LambdaExpression)expr;

						Visit(e.Body,       func);
						Visit(e.Parameters, func);

						break;
					}

				case ExpressionType.ListInit:
					{
						var e = (ListInitExpression)expr;

						Visit(e.NewExpression, func);
						Visit(e.Initializers,  ex => Visit(ex.Arguments, func));

						break;
					}

				case ExpressionType.MemberAccess: Visit(((MemberExpression)expr).Expression, func); break;

				case ExpressionType.MemberInit:
					{
						Func<MemberBinding,bool> modify = null; modify = b =>
						{
							switch (b.BindingType)
							{
								case MemberBindingType.Assignment    : Visit(((MemberAssignment)b). Expression,   func);                          break;
								case MemberBindingType.ListBinding   : Visit(((MemberListBinding)b).Initializers, p => Visit(p.Arguments, func)); break;
								case MemberBindingType.MemberBinding : Visit(((MemberMemberBinding)b).Bindings,   modify);                        break;
							}

							return true;
						};

						var e = (MemberInitExpression)expr;

						Visit(e.NewExpression, func);
						Visit(e.Bindings,      modify);

						break;
					}

				case ExpressionType.New            : Visit(((NewExpression)       expr).Arguments,   func); break;
				case ExpressionType.NewArrayBounds : Visit(((NewArrayExpression)  expr).Expressions, func); break;
				case ExpressionType.NewArrayInit   : Visit(((NewArrayExpression)  expr).Expressions, func); break;
				case ExpressionType.TypeIs         : Visit(((TypeBinaryExpression)expr).Expression,  func); break;

#if FW4 || SILVERLIGHT

				case ExpressionType.Block:
					{
						var e = (BlockExpression)expr;

						Visit(e.Expressions, func);
						Visit(e.Variables,   func);

						break;
					}

#endif

				case (ExpressionType)ChangeTypeExpression.ChangeTypeType :
					Visit(((ChangeTypeExpression)expr).Expression,  func);
					break;
			}
		}

		#endregion

		#region Find

		static Expression Find<T>(IEnumerable<T> source, Func<T,Expression> func)
		{
			foreach (var item in source)
			{
				var ex = func(item);
				if (ex != null)
					return ex;
			}

			return null;
		}

		static Expression Find<T>(IEnumerable<T> source, Func<Expression,bool> func)
			where T : Expression
		{
			foreach (var item in source)
			{
				var f = Find(item, func);
				if (f != null)
					return f;
			}

			return null;
		}

		public static Expression Find(this Expression expr, Func<Expression,bool> func)
		{
			if (expr == null || func(expr))
				return expr;

			switch (expr.NodeType)
			{
				case ExpressionType.Add:
				case ExpressionType.AddChecked:
				case ExpressionType.And:
				case ExpressionType.AndAlso:
				case ExpressionType.ArrayIndex:
#if FW4 || SILVERLIGHT
				case ExpressionType.Assign:
#endif
				case ExpressionType.Coalesce:
				case ExpressionType.Divide:
				case ExpressionType.Equal:
				case ExpressionType.ExclusiveOr:
				case ExpressionType.GreaterThan:
				case ExpressionType.GreaterThanOrEqual:
				case ExpressionType.LeftShift:
				case ExpressionType.LessThan:
				case ExpressionType.LessThanOrEqual:
				case ExpressionType.Modulo:
				case ExpressionType.Multiply:
				case ExpressionType.MultiplyChecked:
				case ExpressionType.NotEqual:
				case ExpressionType.Or:
				case ExpressionType.OrElse:
				case ExpressionType.Power:
				case ExpressionType.RightShift:
				case ExpressionType.Subtract:
				case ExpressionType.SubtractChecked:
					{
						var e = (BinaryExpression)expr;

						return
							Find(e.Conversion, func) ??
							Find(e.Left,       func) ??
							Find(e.Right,      func);
					}

				case ExpressionType.ArrayLength:
				case ExpressionType.Convert:
				case ExpressionType.ConvertChecked:
				case ExpressionType.Negate:
				case ExpressionType.NegateChecked:
				case ExpressionType.Not:
				case ExpressionType.Quote:
				case ExpressionType.TypeAs:
				case ExpressionType.UnaryPlus:
					return Find(((UnaryExpression)expr).Operand, func);

				case ExpressionType.Call:
					{
						var e = (MethodCallExpression)expr;

						return
							Find(e.Object,    func) ??
							Find(e.Arguments, func);
					}

				case ExpressionType.Conditional:
					{
						var e = (ConditionalExpression)expr;

						return
							Find(e.Test,    func) ??
							Find(e.IfTrue,  func) ??
							Find(e.IfFalse, func);
					}

				case ExpressionType.Invoke:
					{
						var e = (InvocationExpression)expr;

						return
							Find(e.Expression, func) ??
							Find(e.Arguments,  func);
					}

				case ExpressionType.Lambda:
					{
						var e = (LambdaExpression)expr;

						return
							Find(e.Body,       func) ??
							Find(e.Parameters, func);
					}

				case ExpressionType.ListInit:
					{
						var e = (ListInitExpression)expr;

						return
							Find(e.NewExpression, func) ??
							Find(e.Initializers,  ex => Find(ex.Arguments, func));
					}

				case ExpressionType.MemberAccess:
					return Find(((MemberExpression)expr).Expression, func);

				case ExpressionType.MemberInit:
					{
						Func<MemberBinding,Expression> modify = null; modify = b =>
						{
							switch (b.BindingType)
							{
								case MemberBindingType.Assignment    : return Find(((MemberAssignment)b).   Expression,   func);
								case MemberBindingType.ListBinding   : return Find(((MemberListBinding)b).  Initializers, p => Find(p.Arguments, func));
								case MemberBindingType.MemberBinding : return Find(((MemberMemberBinding)b).Bindings,     modify);
							}

							return null;
						};

						var e = (MemberInitExpression)expr;

						return
							Find(e.NewExpression, func) ??
							Find(e.Bindings,      modify);
					}

				case ExpressionType.New            : return Find(((NewExpression)       expr).Arguments,   func);
				case ExpressionType.NewArrayBounds : return Find(((NewArrayExpression)  expr).Expressions, func);
				case ExpressionType.NewArrayInit   : return Find(((NewArrayExpression)  expr).Expressions, func);
				case ExpressionType.TypeIs         : return Find(((TypeBinaryExpression)expr).Expression,  func);

#if FW4 || SILVERLIGHT

				case ExpressionType.Block:
					{
						var e = (BlockExpression)expr;

						return
							Find(e.Expressions, func) ??
							Find(e.Variables,   func);
					}

#endif

				case (ExpressionType)ChangeTypeExpression.ChangeTypeType :
					return Find(((ChangeTypeExpression)expr).Expression, func);
			}

			return null;
		}

		#endregion

		#region Transform

		static IEnumerable<T> Transform<T>(ICollection<T> source, Func<T,T> func)
			where T : class
		{
			var modified = false;
			var list     = new List<T>();

			foreach (var item in source)
			{
				var e = func(item);
				list.Add(e);
				modified = modified || e != item;
			}

			return modified ? list : source;
		}

		static IEnumerable<T> Transform<T>(ICollection<T> source, Func<Expression,Expression> func)
			where T : Expression
		{
			var modified = false;
			var list     = new List<T>();

			foreach (var item in source)
			{
				var e = Transform(item, func);
				list.Add((T)e);
				modified = modified || e != item;
			}

			return modified? list: source;
		}

		public static Expression Transform(this Expression expr, Func<Expression,Expression> func)
		{
			if (expr == null)
				return null;

			switch (expr.NodeType)
			{
				case ExpressionType.Add:
				case ExpressionType.AddChecked:
				case ExpressionType.And:
				case ExpressionType.AndAlso:
				case ExpressionType.ArrayIndex:
#if FW4 || SILVERLIGHT
				case ExpressionType.Assign:
#endif
				case ExpressionType.Coalesce:
				case ExpressionType.Divide:
				case ExpressionType.Equal:
				case ExpressionType.ExclusiveOr:
				case ExpressionType.GreaterThan:
				case ExpressionType.GreaterThanOrEqual:
				case ExpressionType.LeftShift:
				case ExpressionType.LessThan:
				case ExpressionType.LessThanOrEqual:
				case ExpressionType.Modulo:
				case ExpressionType.Multiply:
				case ExpressionType.MultiplyChecked:
				case ExpressionType.NotEqual:
				case ExpressionType.Or:
				case ExpressionType.OrElse:
				case ExpressionType.Power:
				case ExpressionType.RightShift:
				case ExpressionType.Subtract:
				case ExpressionType.SubtractChecked:
					{
						var ex = func(expr);
						if (ex != expr)
							return ex;

						var e = (BinaryExpression)expr;
						var c = Transform(e.Conversion, func);
						var l = Transform(e.Left,       func);
						var r = Transform(e.Right,      func);

						return c != e.Conversion || l != e.Left || r != e.Right ?
							Expression.MakeBinary(expr.NodeType, l, r, e.IsLiftedToNull, e.Method, (LambdaExpression)c):
							expr;
					}

				case ExpressionType.ArrayLength:
				case ExpressionType.Convert:
				case ExpressionType.ConvertChecked:
				case ExpressionType.Negate:
				case ExpressionType.NegateChecked:
				case ExpressionType.Not:
				case ExpressionType.Quote:
				case ExpressionType.TypeAs:
				case ExpressionType.UnaryPlus:
					{
						var ex = func(expr);
						if (ex != expr)
							return ex;

						var e = (UnaryExpression)expr;
						var o = Transform(e.Operand, func);

						return o != e.Operand ?
							Expression.MakeUnary(expr.NodeType, o, e.Type, e.Method) :
							expr;
					}

				case ExpressionType.Call:
					{
						var ex = func(expr);
						if (ex != expr)
							return ex;

						var e = (MethodCallExpression)expr;
						var o = Transform(e.Object,    func);
						var a = Transform(e.Arguments, func);

						return o != e.Object || a != e.Arguments ? 
							Expression.Call(o, e.Method, a) : 
							expr;
					}

				case ExpressionType.Conditional:
					{
						var ex = func(expr);
						if (ex != expr)
							return ex;

						var e = (ConditionalExpression)expr;
						var s = Transform(e.Test,    func);
						var t = Transform(e.IfTrue,  func);
						var f = Transform(e.IfFalse, func);

						return s != e.Test || t != e.IfTrue || f != e.IfFalse ?
							Expression.Condition(s, t, f) :
							expr;
					}

				case ExpressionType.Invoke:
					{
						var exp = func(expr);
						if (exp != expr)
							return exp;

						var e  = (InvocationExpression)expr;
						var ex = Transform(e.Expression, func);
						var a  = Transform(e.Arguments,  func);

						return ex != e.Expression || a != e.Arguments ? Expression.Invoke(ex, a) : expr;
					}

				case ExpressionType.Lambda:
					{
						var ex = func(expr);
						if (ex != expr)
							return ex;

						var e = (LambdaExpression)expr;
						var b = Transform(e.Body,       func);
						var p = Transform(e.Parameters, func);

						return b != e.Body || p != e.Parameters ? Expression.Lambda(ex.Type, b, p.ToArray()) : expr;
					}

				case ExpressionType.ListInit:
					{
						var ex = func(expr);
						if (ex != expr)
							return ex;

						var e = (ListInitExpression)expr;
						var n = Transform(e.NewExpression, func);
						var i = Transform(e.Initializers,  p =>
						{
							var args = Transform(p.Arguments, func);
							return args != p.Arguments? Expression.ElementInit(p.AddMethod, args): p;
						});

						return n != e.NewExpression || i != e.Initializers ?
							Expression.ListInit((NewExpression)n, i) :
							expr;
					}

				case ExpressionType.MemberAccess:
					{
						var exp = func(expr);
						if (exp != expr)
							return exp;

						var e  = (MemberExpression)expr;
						var ex = Transform(e.Expression, func);

						return ex != e.Expression ? Expression.MakeMemberAccess(ex, e.Member) : expr;
					}

				case ExpressionType.MemberInit:
					{
						var exp = func(expr);
						if (exp != expr)
							return exp;

						Func<MemberBinding,MemberBinding> modify = null; modify = b =>
						{
							switch (b.BindingType)
							{
								case MemberBindingType.Assignment:
									{
										var ma = (MemberAssignment)b;
										var ex = Transform(ma.Expression, func);

										if (ex != ma.Expression)
											ma = Expression.Bind(ma.Member, ex);

										return ma;
									}

								case MemberBindingType.ListBinding:
									{
										var ml = (MemberListBinding)b;
										var i  = Transform(ml.Initializers, p =>
										{
											var args = Transform(p.Arguments, func);
											return args != p.Arguments? Expression.ElementInit(p.AddMethod, args): p;
										});

										if (i != ml.Initializers)
											ml = Expression.ListBind(ml.Member, i);

										return ml;
									}

								case MemberBindingType.MemberBinding:
									{
										var mm = (MemberMemberBinding)b;
										var bs = Transform(mm.Bindings, modify);

										if (bs != mm.Bindings)
											mm = Expression.MemberBind(mm.Member);

										return mm;
									}
							}

							return b;
						};

						var e  = (MemberInitExpression)expr;
						var ne = Transform(e.NewExpression, func);
						var bb = Transform(e.Bindings,      modify);

						return ne != e.NewExpression || bb != e.Bindings ?
							Expression.MemberInit((NewExpression)ne, bb) :
							expr;
					}

				case ExpressionType.New:
					{
						var ex = func(expr);
						if (ex != expr)
							return ex;

						var e = (NewExpression)expr;
						var a = Transform(e.Arguments, func);

						return a != e.Arguments ?
							e.Members == null ?
								Expression.New(e.Constructor, a) :
								Expression.New(e.Constructor, a, e.Members) :
							expr;
					}

				case ExpressionType.NewArrayBounds:
					{
						var exp = func(expr);
						if (exp != expr)
							return exp;

						var e  = (NewArrayExpression)expr;
						var ex = Transform(e.Expressions, func);

						return ex != e.Expressions ? Expression.NewArrayBounds(e.Type, ex) : expr;
					}

				case ExpressionType.NewArrayInit:
					{
						var exp = func(expr);
						if (exp != expr)
							return exp;

						var e  = (NewArrayExpression)expr;
						var ex = Transform(e.Expressions, func);

						return ex != e.Expressions ?
							Expression.NewArrayInit(e.Type.GetElementType(), ex) :
							expr;
					}

				case ExpressionType.TypeIs:
					{
						var exp = func(expr);
						if (exp != expr)
							return exp;

						var e  = (TypeBinaryExpression)expr;
						var ex = Transform(e.Expression, func);

						return ex != e.Expression ? Expression.TypeIs(ex, e.Type) : expr;
					}

#if FW4 || SILVERLIGHT

				case ExpressionType.Block:
					{
						var exp = func(expr);
						if (exp != expr)
							return exp;

						var e  = (BlockExpression)expr;
						var ex = Transform(e.Expressions, func);
						var v  = Transform(e.Variables,   func);

						return ex != e.Expressions || v != e.Variables ? Expression.Block(e.Type, v, ex) : expr;
					}

#endif

				case ExpressionType.Constant : return func(expr);
				case ExpressionType.Parameter: return func(expr);

				case (ExpressionType)ChangeTypeExpression.ChangeTypeType :
					{
						var exp = func(expr);
						if (exp != expr)
							return exp;

						var e  = (ChangeTypeExpression)expr;
						var ex = Transform(e.Expression, func);

						if (ex == e.Expression)
							return expr;

						if (ex.Type == e.Type)
							return ex;

						return new ChangeTypeExpression(ex, e.Type);
					}
			}

			throw new InvalidOperationException();
		}

		#endregion

		#region Transform2

		static IEnumerable<T> Transform2<T>(ICollection<T> source, Func<T,T> func)
			where T : class
		{
			var modified = false;
			var list     = new List<T>();

			foreach (var item in source)
			{
				var e = func(item);
				list.Add(e);
				modified = modified || e != item;
			}

			return modified ? list : source;
		}

		static IEnumerable<T> Transform2<T>(ICollection<T> source, Func<Expression,TransformInfo> func)
			where T : Expression
		{
			var modified = false;
			var list     = new List<T>();

			foreach (var item in source)
			{
				var e = Transform(item, func);
				list.Add((T)e);
				modified = modified || e != item;
			}

			return modified ? list : source;
		}

		public static Expression Transform(this Expression expr, Func<Expression,TransformInfo> func)
		{
			if (expr == null)
				return null;

			switch (expr.NodeType)
			{
				case ExpressionType.Add:
				case ExpressionType.AddChecked:
				case ExpressionType.And:
				case ExpressionType.AndAlso:
				case ExpressionType.ArrayIndex:
#if FW4 || SILVERLIGHT
				case ExpressionType.Assign:
#endif
				case ExpressionType.Coalesce:
				case ExpressionType.Divide:
				case ExpressionType.Equal:
				case ExpressionType.ExclusiveOr:
				case ExpressionType.GreaterThan:
				case ExpressionType.GreaterThanOrEqual:
				case ExpressionType.LeftShift:
				case ExpressionType.LessThan:
				case ExpressionType.LessThanOrEqual:
				case ExpressionType.Modulo:
				case ExpressionType.Multiply:
				case ExpressionType.MultiplyChecked:
				case ExpressionType.NotEqual:
				case ExpressionType.Or:
				case ExpressionType.OrElse:
				case ExpressionType.Power:
				case ExpressionType.RightShift:
				case ExpressionType.Subtract:
				case ExpressionType.SubtractChecked:
					{
						var ex = func(expr);
						if (ex.Stop || ex.Expression != expr)
							return ex.Expression;

						var e = (BinaryExpression)expr;
						var c = Transform(e.Conversion, func);
						var l = Transform(e.Left,       func);
						var r = Transform(e.Right,      func);

						return c != e.Conversion || l != e.Left || r != e.Right ?
							Expression.MakeBinary(expr.NodeType, l, r, e.IsLiftedToNull, e.Method, (LambdaExpression)c):
							expr;
					}

				case ExpressionType.ArrayLength:
				case ExpressionType.Convert:
				case ExpressionType.ConvertChecked:
				case ExpressionType.Negate:
				case ExpressionType.NegateChecked:
				case ExpressionType.Not:
				case ExpressionType.Quote:
				case ExpressionType.TypeAs:
				case ExpressionType.UnaryPlus:
					{
						var ex = func(expr);
						if (ex.Stop || ex.Expression != expr)
							return ex.Expression;

						var e = (UnaryExpression)expr;
						var o = Transform(e.Operand, func);

						return o != e.Operand ?
							Expression.MakeUnary(expr.NodeType, o, e.Type, e.Method) :
							expr;
					}

				case ExpressionType.Call:
					{
						var ex = func(expr);
						if (ex.Stop || ex.Expression != expr)
							return ex.Expression;

						var e = (MethodCallExpression)expr;
						var o = Transform(e.Object,    func);
						var a = Transform2(e.Arguments, func);

						return o != e.Object || a != e.Arguments ? 
							Expression.Call(o, e.Method, a) : 
							expr;
					}

				case ExpressionType.Conditional:
					{
						var ex = func(expr);
						if (ex.Stop || ex.Expression != expr)
							return ex.Expression;

						var e = (ConditionalExpression)expr;
						var s = Transform(e.Test,    func);
						var t = Transform(e.IfTrue,  func);
						var f = Transform(e.IfFalse, func);

						return s != e.Test || t != e.IfTrue || f != e.IfFalse ?
							Expression.Condition(s, t, f) :
							expr;
					}

				case ExpressionType.Invoke:
					{
						var exp = func(expr);
						if (exp.Stop || exp.Expression != expr)
							return exp.Expression;

						var e  = (InvocationExpression)expr;
						var ex = Transform(e.Expression, func);
						var a  = Transform2(e.Arguments,  func);

						return ex != e.Expression || a != e.Arguments ? Expression.Invoke(ex, a) : expr;
					}

				case ExpressionType.Lambda:
					{
						var ex = func(expr);
						if (ex.Stop || ex.Expression != expr)
							return ex.Expression;

						var e = (LambdaExpression)expr;
						var b = Transform(e.Body,       func);
						var p = Transform2(e.Parameters, func);

						return b != e.Body || p != e.Parameters ? Expression.Lambda(ex.Expression.Type, b, p.ToArray()) : expr;
					}

				case ExpressionType.ListInit:
					{
						var ex = func(expr);
						if (ex.Stop || ex.Expression != expr)
							return ex.Expression;

						var e = (ListInitExpression)expr;
						var n = Transform(e.NewExpression, func);
						var i = Transform2(e.Initializers,  p =>
						{
							var args = Transform2(p.Arguments, func);
							return args != p.Arguments? Expression.ElementInit(p.AddMethod, args): p;
						});

						return n != e.NewExpression || i != e.Initializers ?
							Expression.ListInit((NewExpression)n, i) :
							expr;
					}

				case ExpressionType.MemberAccess:
					{
						var exp = func(expr);
						if (exp.Stop || exp.Expression != expr)
							return exp.Expression;

						var e  = (MemberExpression)expr;
						var ex = Transform(e.Expression, func);

						return ex != e.Expression ? Expression.MakeMemberAccess(ex, e.Member) : expr;
					}

				case ExpressionType.MemberInit:
					{
						var exp = func(expr);
						if (exp.Stop || exp.Expression != expr)
							return exp.Expression;

						Func<MemberBinding,MemberBinding> modify = null; modify = b =>
						{
							switch (b.BindingType)
							{
								case MemberBindingType.Assignment:
									{
										var ma = (MemberAssignment)b;
										var ex = Transform(ma.Expression, func);

										if (ex != ma.Expression)
											ma = Expression.Bind(ma.Member, ex);

										return ma;
									}

								case MemberBindingType.ListBinding:
									{
										var ml = (MemberListBinding)b;
										var i  = Transform(ml.Initializers, p =>
										{
											var args = Transform2(p.Arguments, func);
											return args != p.Arguments? Expression.ElementInit(p.AddMethod, args): p;
										});

										if (i != ml.Initializers)
											ml = Expression.ListBind(ml.Member, i);

										return ml;
									}

								case MemberBindingType.MemberBinding:
									{
										var mm = (MemberMemberBinding)b;
										var bs = Transform(mm.Bindings, modify);

										if (bs != mm.Bindings)
											mm = Expression.MemberBind(mm.Member);

										return mm;
									}
							}

							return b;
						};

						var e  = (MemberInitExpression)expr;
						var ne = Transform(e.NewExpression, func);
						var bb = Transform2(e.Bindings,      modify);

						return ne != e.NewExpression || bb != e.Bindings ?
							Expression.MemberInit((NewExpression)ne, bb) :
							expr;
					}

				case ExpressionType.New:
					{
						var ex = func(expr);
						if (ex.Stop || ex.Expression != expr)
							return ex.Expression;

						var e = (NewExpression)expr;
						var a = Transform2(e.Arguments, func);

						return a != e.Arguments ?
							e.Members == null ?
								Expression.New(e.Constructor, a) :
								Expression.New(e.Constructor, a, e.Members) :
							expr;
					}

				case ExpressionType.NewArrayBounds:
					{
						var exp = func(expr);
						if (exp.Stop || exp.Expression != expr)
							return exp.Expression;

						var e  = (NewArrayExpression)expr;
						var ex = Transform2(e.Expressions, func);

						return ex != e.Expressions ? Expression.NewArrayBounds(e.Type, ex) : expr;
					}

				case ExpressionType.NewArrayInit:
					{
						var exp = func(expr);
						if (exp.Stop || exp.Expression != expr)
							return exp.Expression;

						var e  = (NewArrayExpression)expr;
						var ex = Transform2(e.Expressions, func);

						return ex != e.Expressions ?
							Expression.NewArrayInit(e.Type.GetElementType(), ex) :
							expr;
					}

				case ExpressionType.TypeIs :
					{
						var exp = func(expr);
						if (exp.Stop || exp.Expression != expr)
							return exp.Expression;

						var e  = (TypeBinaryExpression)expr;
						var ex = Transform(e.Expression, func);

						return ex != e.Expression ? Expression.TypeIs(ex, e.Type) : expr;
					}

#if FW4 || SILVERLIGHT

				case ExpressionType.Block :
					{
						var exp = func(expr);
						if (exp.Stop || exp.Expression != expr)
							return exp.Expression;

						var e  = (BlockExpression)expr;
						var ex = Transform2(e.Expressions, func);
						var v  = Transform2(e.Variables,   func);

						return ex != e.Expressions || v != e.Variables ? Expression.Block(e.Type, v, ex) : expr;
					}

#endif

				case ExpressionType.Constant : return func(expr).Expression;
				case ExpressionType.Parameter: return func(expr).Expression;

				case (ExpressionType)ChangeTypeExpression.ChangeTypeType :
					{
						var exp = func(expr);
						if (exp.Stop || exp.Expression != expr)
							return exp.Expression;

						var e  = (ChangeTypeExpression)expr;
						var ex = Transform(e.Expression, func);

						if (ex == e.Expression)
							return expr;

						if (ex.Type == e.Type)
							return ex;

						return new ChangeTypeExpression(ex, e.Type);
					}
			}

			throw new InvalidOperationException();
		}

		#endregion

		#region Helpers

		static public Expression Unwrap(this Expression ex)
		{
			if (ex == null)
				return null;

			switch (ex.NodeType)
			{
				case ExpressionType.Quote          : return ((UnaryExpression)ex).Operand.Unwrap();
				case ExpressionType.ConvertChecked :
				case ExpressionType.Convert        :
					{
						var ue = (UnaryExpression)ex;

						if (!ue.Operand.Type.IsEnum)
							return ue.Operand.Unwrap();

						break;
					}
			}

			return ex;
		}

		static public Dictionary<Expression,Expression> GetExpressionAccessors(this Expression expression, Expression path)
		{
			var accessors = new Dictionary<Expression, Expression>();

			expression.Path(path, (e,p) =>
			{
				switch (e.NodeType)
				{
					case ExpressionType.Call           :
					case ExpressionType.MemberAccess   :
					case ExpressionType.New            :
						if (!accessors.ContainsKey(e))
							accessors.Add(e, p);
						break;

					case ExpressionType.Constant       :
						if (!accessors.ContainsKey(e))
							accessors.Add(e, Expression.Property(p, ReflectionHelper.Constant.Value));
						break;

					case ExpressionType.ConvertChecked :
					case ExpressionType.Convert        :
						if (!accessors.ContainsKey(e))
						{
							var ue = (UnaryExpression)e;

							switch (ue.Operand.NodeType)
							{
								case ExpressionType.Call           :
								case ExpressionType.MemberAccess   :
								case ExpressionType.New            :
								case ExpressionType.Constant       :

									accessors.Add(e, p);
									break;
							}
						}

						break;
				}
			});

			return accessors;
		}

		static public Expression GetRootObject(this Expression expr)
		{
			if (expr == null)
				return null;

			switch (expr.NodeType)
			{
				case ExpressionType.Call         :
					{
						var e = (MethodCallExpression)expr;

						if (e.Object != null)
							return GetRootObject(e.Object);

						if (e.Arguments != null && e.Arguments.Count > 0 && e.IsQueryable())
							return GetRootObject(e.Arguments[0]);

						break;
					}

				case ExpressionType.MemberAccess :
					{
						var e = (MemberExpression)expr;

						if (e.Expression != null)
							return GetRootObject(e.Expression.Unwrap());

						break;
					}
			}

			return expr;
		}

		static public List<Expression> GetMembers(this Expression expr)
		{
			if (expr == null)
				return new List<Expression>();

			List<Expression> list;

			switch (expr.NodeType)
			{
				case ExpressionType.Call         :
					{
						var e = (MethodCallExpression)expr;

						if (e.Object != null)
							list = GetMembers(e.Object);
						else if (e.Arguments != null && e.Arguments.Count > 0 && e.IsQueryable())
							list = GetMembers(e.Arguments[0]);
						else
							list = new List<Expression>();

						break;
					}

				case ExpressionType.MemberAccess :
					{
						var e = (MemberExpression)expr;

						list = e.Expression != null ? GetMembers(e.Expression.Unwrap()) : new List<Expression>();

						break;
					}

				default                          :
					list = new List<Expression>();
					break;
			}

			list.Add(expr);

			return list;
		}

		static public bool IsQueryable(this MethodCallExpression method)
		{
			var type = method.Method.DeclaringType;

			return type == typeof(Queryable) || type == typeof(Enumerable) || type == typeof(LinqExtensions);
		}

		static public bool IsQueryable(this MethodCallExpression method, string name)
		{
			return method.Method.Name == name && method.IsQueryable();
		}

		static public bool IsQueryable(this MethodCallExpression method, params string[] names)
		{
			if (method.IsQueryable())
				foreach (var name in names)
					if (method.Method.Name == name)
						return true;

			return false;
		}

		static Expression FindLevel(Expression expression, int level, ref int current)
		{
			switch (expression.NodeType)
			{
				case ExpressionType.Call :
					{
						var call = (MethodCallExpression)expression;
						var expr = call.Object;

						if (expr == null && call.IsQueryable() && call.Arguments.Count > 0)
							expr = call.Arguments[0];

						if (expr != null)
						{
							var ex = FindLevel(expr, level, ref current);

							if (level == current)
								return ex;

							current++;
						}

						break;
					}

				case ExpressionType.MemberAccess:
					{
						var e = ((MemberExpression)expression);

						if (e.Expression != null)
						{
							var expr = FindLevel(e.Expression.Unwrap(), level, ref current);

							if (level == current)
								return expr;

							current++;
						}

						break;
					}
			}

			return expression;
		}

		static public Expression GetLevelExpression(this Expression expression, int level)
		{
			var current = 0;
			var expr    = FindLevel(expression, level, ref current);

			if (expr == null || current != level)
				throw new InvalidOperationException();

			return expr;
		}

		#endregion
*/
	}
}
