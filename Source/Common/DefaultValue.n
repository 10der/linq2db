using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Reflection;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Linq;
using Nemerle.Extensions;

namespace LinqToDB_Temp
{
	using Extensions;

	public module DefaultValue
	{
		_values : Dictionary[Type,object] = Dictionary.[Type,object]() <-
		[
			typeof(int)            = default(int),
			typeof(uint)           = default(uint),
			typeof(byte)           = default(byte),
			typeof(char)           = default(char),
			typeof(bool)           = default(bool),
			typeof(sbyte)          = default(sbyte),
			typeof(short)          = default(short),
			typeof(long)           = default(long),
			typeof(ushort)         = default(ushort),
			typeof(ulong)          = default(ulong),
			typeof(float)          = default(float),
			typeof(double)         = default(double),
			typeof(decimal)        = default(decimal),
			typeof(DateTime)       = default(DateTime),
			typeof(TimeSpan)       = default(TimeSpan),
			typeof(DateTimeOffset) = default(DateTimeOffset),
			typeof(Guid)           = default(Guid),
			typeof(string)         = default(string)
		];

		public GetValue([NotNull] type : Type) : object
		{
			mutable value;

			if (_values.TryGetValue(type, out value))
			{
				value
			}
			else
			{
				if (type.IsClass)
					null
				else
				{
					value =
						if (type.IsNullable())
							null
						else
							match (ToExpression(() => GetValue.[int]()))
							{
								| Lambda(Call(mi, _),_) =>
									Expression.Lambda.[Func[object]](
										Expression.Convert(
											Expression.Call(mi.GetGenericMethodDefinition().MakeGenericMethod(type)),
											typeof(object)))
										.Compile()()
								| _ => throw InvalidOperationException()
							}

					_values[type] = value;

					value
				}
			}
		}

		public GetValue[T]() : T
		{
			mutable value;

			if (_values.TryGetValue(typeof(T), out value))
			{
				value :> T
			}
			else
			{
				_values[typeof(T)] = default(T);
				default(T)
			}
		}

		public SetValue([NotNull] type : Type, value : object) : void
			requires value != null || type.IsClass || type.IsNullable()
			requires value == null || value.GetType() == type || value.GetType().ToUnderlying() == type.ToUnderlying()
		{
			_values[type] = value
		}
	}

	public module DefaultValue[T]
	{
		mutable _value : T = DefaultValue.GetValue();

		public Value : T
		{
			get { _value }
			set
			{
				_value = value;
				DefaultValue.SetValue(typeof(T), value)
			}
		}
	}
}
