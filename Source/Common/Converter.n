using System;
using System.Linq.Expressions;
using System.Linq.Expressions.Expression;

using Nemerle;
using Nemerle.Collections;

namespace LinqToDB_Temp.Common
{
	using Extensions;

	public module Converter
	{
		_converters : Hashtable[Type * Type, Func[object,object]] = Hashtable();

		public ChangeType(value : object, conversionType : Type) : object
		{
			if (value == null)
				DefaultValue.GetValue(conversionType)
			else if (value.GetType() == conversionType)
				value
			else
			{
				def from = value.GetType();
				def to   = conversionType;

				mutable l;

				when (!lock (_converters) _converters.TryGetValue((from, to), out l))
				{
					match (ConvertInfo.Default.Get(value.GetType(), to).Value)
					{
						| (Lambda(b,ps), _) =>
							def p = Parameter(typeof(object), "p");
							def e = Lambda.[Func[object,object]](
								Convert(b.Transform(e =>
									if      (ReferenceEquals(e, ps[0]))    Convert (p, e.Type)
									else if (IsDefaultValuePlaceHolder(e)) Constant(DefaultValue.GetValue(e.Type))
									else e
								), typeof(object)),
								p);

							l = e.Compile();

							lock (_converters)
								_converters[(from, to)] = l;
					}
				}

				l(value)
			}
		}

		module ExprHolder[T]
		{
			public Converters : Hashtable[Type, Func[object,T]] = Hashtable();
		}

		public ChangeTypeTo[T](value : object) : object
		{
			if (value == null)
				DefaultValue[T].Value
			else if (value.GetType() == typeof(T))
				value :> T
			else
			{
				def from = value.GetType();
				def to   = typeof(T);

				mutable l;

				when (!lock (ExprHolder[T].Converters) ExprHolder[T].Converters.TryGetValue(from, out l))
				{
					match (ConvertInfo.Default.Get(value.GetType(), to).Value)
					{
						| (Lambda(b,ps), _) =>
							def p = Parameter(typeof(object), "p");
							def e = Lambda.[Func[object,T]](
								b.Transform(e =>
									if      (ReferenceEquals(e, ps[0]))    Convert (p, e.Type)
									else if (IsDefaultValuePlaceHolder(e)) Constant(DefaultValue.GetValue(e.Type))
									else e),
								p);

							l = e.Compile();

							lock (ExprHolder.Converters)
								ExprHolder.Converters[from] = l;
					}
				}

				l(value)
			}
		}

		internal IsDefaultValuePlaceHolder(expr : Expression) : bool
		{
			| Member(null, "Value", (IsGenericType = true) as dt) => dt.GetGenericTypeDefinition() == typeof(DefaultValue[_])
			| x => x is DefaultValueExpression
		}
	}
}
