using System;
using System.Globalization;
using System.Linq.Expressions;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Linq;

namespace LinqToDB_Temp.Common
{
	using MacroInternal.Common;

	public class ConvertInfo
	{
		public static Default : ConvertInfo = ConvertInfo();

		_expressions : Hashtable[Type,Hashtable[Type,LambdaExpression * Delegate]] = Hashtable();

		public Set(from : Type, to : Type, expr : LambdaExpression * Delegate) : void
		{
			match (_expressions.Get(from))
			{
				| Some(t) => t[to] = expr
				| None    => _expressions[from] = Hashtable() <- [ to = expr ]
			}
		}

		public Set[TFrom,TTo](expr : Expression[Func[TFrom,TTo]]) : void
		{
			Set(typeof(TFrom), typeof(TTo), (expr, expr.Compile()))
		}

		public Get(from : Type, to : Type, create = true) : option[LambdaExpression * Delegate]
		{
			def ex =
				match (_expressions.Get(from))
				{
					| Some(t) => t.Get(to)
					| None    => None()
				}

			match (ex)
			{
				| None when create =>
					def ex = ConverterMaker().GetConverter(from, to);
					def lm = ex.Compile();
					Set(from, to , (ex, lm));
					Some(ex, lm)
				| _ => ex
			}
		}

		public SetCultureInfo(info : CultureInfo) : void
		{
			SetCultureExpr(SByte);
			SetCultureExpr(Int16);
			SetCultureExpr(Int32);
			SetCultureExpr(Int64);
			SetCultureExpr(Byte);
			SetCultureExpr(UInt16);
			SetCultureExpr(UInt32);
			SetCultureExpr(UInt64);
			SetCultureExpr(Single);
			SetCultureExpr(Double);
			SetCultureExpr(Decimal);
			SetCultureExpr(DateTime, DateTimeFormat);
		}
	}
}
