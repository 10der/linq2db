using System;
using System.Data.Linq;
using System.Globalization;
using System.Linq.Expressions;
using System.Linq.Expressions.Expression;
using System.Reflection;
using System.Threading;

using Nemerle;
using Nemerle.Linq;

namespace LinqToDB_Temp.Common
{
	using Extensions;

	class ConverterMaker
	{
		GetCtor(from : Type, to : Type, p : Expression) : option[Expression]
		{
			def ctor = to.GetConstructor(array[from]);
			if (ctor != null) Some(New(ctor, array[p])) else None()
		}

		GetValue(from : Type, to : Type, p : Expression) : option[Expression]
		{
			match (from.GetProperty("Value"))
			{
				| null =>
					match (from.GetField("Value"))
					{
						| fi when fi != null && fi.FieldType == to => Some(Field(p, fi))
						| _ => None()
					}
				| pi when pi.PropertyType == to => Some(Property(p, pi))
				| _    => None()
			}
		}

		GetOperator(from : Type, to : Type, p : Expression) : option[Expression]
		{
			def op =
				to.GetMethod("op_Implicit", BindingFlags.Static | BindingFlags.Public, null, array[from], null) ??
				to.GetMethod("op_Explicit", BindingFlags.Static | BindingFlags.Public, null, array[from], null);

			if (op != null) Some(Convert(p, to, op)) else None()
		}

		IsConvertible(type : Type) : bool
		{
			match (Type.GetTypeCode(type))
			{
				| Boolean
				| Byte
				| SByte
				| Int16
				| Int32
				| Int64
				| UInt16
				| UInt32
				| UInt64
				| Single
				| Double
				| Char   => true
				| _      => false
			}
		}

		GetConvertion(from : Type, to : Type, p : Expression) : option[Expression]
		{
			if (IsConvertible(from) && IsConvertible(to) && to != typeof(bool) || from.IsAssignableFrom(to) && to.IsAssignableFrom(from))
				Some(ConvertChecked(p, to))
			else
				None()
		}

		GetParse(from : Type, to : Type, p : Expression) : option[Expression]
		{
			if (from == typeof(string))
			{
				def mi = to.GetMethod("Parse", BindingFlags.Static | BindingFlags.Public, null, array[from], null);
				if (mi != null) Some(Convert(p, to, mi)) else None()
			}
			else
				None()
		}

		GetToString(from : Type, to : Type, p : Expression) : option[Expression]
		{
			if (to == typeof(string))
			{
				def mi = from.GetMethod("ToString", BindingFlags.Instance | BindingFlags.Public, null, array[], null);
				if (mi != null) Some(Call(p, mi)) else None()
			}
			else
				None()
		}

		GetConverter(from : Type, to : Type, p : Expression) : option[Expression]
		{
			if (from == to)
				Some(p)
			else
				GetCtor      (from, to, p) ??
				GetValue     (from, to, p) ??
				GetOperator  (from, to, p) ??
				GetConvertion(from, to, p) ??
				GetParse     (from, to, p) ??
				GetToString  (from, to, p)
		}

		public GetConverter(from : Type, to : Type, defaultValueGetter : Type -> object) : LambdaExpression
		{
			def p = Parameter(from, "p");

			if (from == to)
				Lambda(p, p)
			else if (to == typeof(object))
				Lambda(Convert(p, typeof(object)), p)
			else
			{
				def p = Parameter(from, "p");
				def e =
					match (GetConverter(from, to, p))
					{
						| None =>
							def uto   = to.  ToUnderlying();
							def ufrom = from.ToUnderlying();
							def ex    =
								if (from != ufrom)
								{
									def p = Convert(p, ufrom);

									match (GetConverter(ufrom, to, p))
									{
										| None when to != uto =>
											match (GetConverter(ufrom, uto, p))
											{
												| Some(ex)    => Some(Convert(ex, to))
												| ex          => ex
											}
										| ex                  => ex
									}
								}
								else
									None();

							match (ex)
							{
								| None when to != uto =>
									match (GetConverter(from, uto, p))
									{
										| Some(ex)    => Some(Convert(ex, to))
										| ex          => ex
									}
								| ex                  => ex
							}
						| ex   => ex
					};

				def e =
					match (e)
					{
						| Some(ex) when from.IsNullable() with test = PropertyOrField(p, "HasValue")
						| Some(ex) when from.IsClass      with test = NotEqual(p, Constant(null, from)) =>
							Some(Condition(test, ex, Constant(defaultValueGetter(to), to)));
						| ex => ex
					}

				match (e)
				{
					| Some(ex) => Lambda(ex, p)
					| None     =>
						match (from, to)
						{
							| (f,t) when f == typeof(string) && t == typeof(Binary)      => ToExpression((p : string) => if (p != null) Binary(System.Text.Encoding.UTF8.GetBytes(p)) else null : Binary) : LambdaExpression
							| (f,t) when f == typeof(Binary) && t == typeof(array[byte]) => ToExpression((p : Binary) => if (p != null) p.ToArray()                                   else null : array[byte])
							| _ =>
								match (ToExpression((p : object) => Convert.ChangeType(p, to)))
								{
									| Lambda(Call(mi, _), _) => Lambda(Call(mi, [Convert(p, typeof(object)), Constant(to)]), p)
									| _ => throw InvalidOperationException()
								}
						}
				}
			}
		}
	}
}
