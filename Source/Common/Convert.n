using System;
using System.Linq.Expressions;
using System.Linq.Expressions.Expression;

using Nemerle;

namespace LinqToDB_Temp.Common
{
	public module ConvertTo[TTo]
	{
		public static From[TFrom](o : TFrom) : TTo
		{
			Convert.From(o);
		}
	}

	public module Convert[TFrom,TTo]
	{
		this()
		{
			Init()
		}

		Init() : void
		{
			def expr = ConverterMaker().GetConverter(typeof(TFrom), typeof(TTo), DefaultValue.GetValue);

			_expression = expr :> Expression[Func[TFrom,TTo]];
			_lambda     = expr.Compile() :> Func[TFrom,TTo];
		}

		mutable _expression : Expression[Func[TFrom,TTo]];
		public   Expression : Expression[Func[TFrom,TTo]]
		{
			get { _expression }
			set
			{
				if (value == null)
				{
					Init()
				}
				else
				{
					_expression = value;
					_lambda     = _expression.Compile();

					ConvertInfo.Default.Set(typeof(TFrom), typeof(TTo), (_expression, _lambda))
				}
			}
		}

		mutable _lambda : Func[TFrom,TTo];
		public   Lambda : Func[TFrom,TTo]
		{
			get { _lambda }
			set
			{
				if (value == null)
				{
					Init()
				}
				else
				{
					def p = Parameter(typeof(TFrom), "p");

					_expression = Lambda.[Func[TFrom,TTo]](Invoke(Constant(value), p), p);
					_lambda     = value;

					ConvertInfo.Default.Set(typeof(TFrom), typeof(TTo), (_expression, _lambda))
				}
			}
		}

		public From : Func[TFrom,TTo]
		{
			get { _lambda }
		}
	}
}
