using System;
using System.Linq.Expressions;

using Nemerle;
using Nemerle.Linq;

using LinqExpression = System.Linq.Expressions.Expression;

namespace LinqToDB_Temp.Common
{
	public module ConvertTo[TTo]
	{
		public static From[TFrom](o : TFrom) : TTo
		{
			LinqToDB_Temp.Common.Convert.Lambda(o);
		}
	}

	public module Convert[TFrom,TTo]
	{
		this()
		{
			_expression = GetDefaultConverter();
			_lambda     = _expression.Compile();
		}

		mutable _expression : Expression[Func[TFrom,TTo]];
		public   Expression : Expression[Func[TFrom,TTo]]
		{
			get { _expression }
			set
			{
				_expression = if (value == null) GetDefaultConverter() else value;
				_lambda     = _expression.Compile();
			}
		}

		mutable _lambda : Func[TFrom,TTo];
		public   Lambda : Func[TFrom,TTo]
		{
			get { _lambda }
			set
			{
				if (value == null)
				{
					Expression = null;
				}
				else
				{
					_lambda     = value;

					def p = LinqExpression.Parameter(typeof(TFrom), "p");
					
					_expression = LinqExpression.Lambda.[Func[TFrom,TTo]](
						LinqExpression.Invoke(System.Linq.Expressions.Expression.Constant(value), p),
						p);
				}
			}
		}

		public From : Func[TFrom,TTo]
		{
			get { _lambda }
		}

		GetDefaultConverter() : Expression[Func[TFrom,TTo]]
		{
			ConverterMaker().GetConverter(DefaultValue.GetValue)
		}
	}
}
